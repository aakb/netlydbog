<?php
/**
 * @file
 *
 * elib popup main module file.
 *
 */

/**
 * Implements hook_init().
 *
 * @todo: Is this need one every page on the site ?
 * @todo: Fix this....
 *
 */
function elib_popup_init() {
  $path = drupal_get_path('module', 'elib_popup');

  drupal_add_js($path . '/js/elib_popup_login.js');
  drupal_add_js($path . '/js/elib_popup_download.js');
  drupal_add_js($path . '/js/elib_popup_sample.js');
  drupal_add_js($path . '/js/jquery.form.js');

  drupal_add_css($path . '/css/elib_popup_style.css');

  $theme_path = drupal_get_path('theme', 'ebog');
  drupal_add_js($theme_path . '/js/audio-player/audio-player.js');

  // Why is the theme path needed in the frontend ?
  drupal_add_js(array(
    'elib_popup' => array(
      'theme_path' => $theme_path,
    ),
  ), 'setting');

  // Add ui dialog.
  jquery_ui_add(array('ui.dialog', 'ui.draggable'));
  jquery_ui_theme_load();
}

/**
 * Implementation of hook_menu.
 */
function elib_popup_menu() {
  $menu = array();

  $menu['publizon/%/download/request'] = array(
    'title' => 'Download ting ebook',
    'description' => 'Checker for download abilities regarding selected ebook for specific user.',
    'page callback' => 'elib_popup_download_loan_initial',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $menu['publizon/%/download'] = array(
    'title' => 'Show a popup before download',
    'description' => 'Display some user specific text and perform some check before download.',
    'page callback' => 'elib_popup_loan_popup',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $menu['publizon/%/sample'] = array(
    'title' => 'Stream sample book',
    'description' => 'Stream sample audio book.',
    'page callback' => 'elib_popup_download_sample',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $menu['publizon/popup/login'] = array(
    'title' => 'Login user',
    'description' => 'Try to login user into the libray system.',
    'page callback' => 'elib_popup_login',
    'page arguments' => array(),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $menu;
}

/**
 * Implementation of hook_theme.
 */
function elib_popup_theme() {
  $hooks = array();

  $hooks['elib_popup_download_approve'] = array(
    'arguments' => array('data' => NULL),
    'template' => 'templates/elib_popup-download-approve',
  );

  $hooks['elib_popup_notice'] = array(
    'arguments' => array('data' => NULL),
    'template' => 'templates/elib_popup-notice',
  );

  $hooks['elib_popup_download_info'] = array(
    'arguments' => array('data' => NULL),
    'template' => 'templates/elib_popup-download-info',
  );

  $hooks['elib_popup_stream_info'] = array(
    'arguments' => array('data' => NULL),
    'template' => 'templates/elib_popup-stream-info',
  );

  $hooks['elib_popup_sample_generic'] = array(
    'arguments' => array('data' => NULL),
    'template' => 'templates/elib_popup-sample-generic',
  );

  $hooks['elib_popup_sample_ios'] = array(
    'arguments' => array('data' => NULL),
    'template' => 'templates/elib_popup-sample-ios',
  );

  $hooks['elib_popup_stream_ios'] = array(
    'arguments' => array('data' => NULL),
    'template' => 'templates/elib_popup-stream-ios',
  );

  $hooks['elib_popup_login'] = array(
    'arguments' => array('data' => NULL),
    'template' => 'templates/elib_popup-login',
  );

  return $hooks;
}

/**
 * Implements hook_preprocess_publizon_actions().
 *
 * Adds stream ation to all action links lists.
 */
function elib_popup_preprocess_publizon_actions(&$vars) {
  $isbn = $vars['product']->isbn;

  // Ensure that samples are not downloaded, but streamed.
  foreach ($vars['actions'] as $key => $action) {
    if ($action['#class'] == 'sample') {
      $vars['actions'][$key]['#link'] = l(t('Sample'), 'publizon/' . $isbn . '/sample', array('html' => TRUE, 'attributes' => array('target' => '_blank', 'action' => 'sample')));
    }
  }
}

/**
 * Redirect streaming to pubhub.
 */
function elib_popup_stream_redirect() {
  header("location:" . $_GET['url'] . '&player=' . $_GET['player'] . '&stream=' . $_GET['stream']);
  exit();
}

/**
 * Return content for download or stream.
 *
 * @param type $type
 * @param type $download_url
 */
function _elib_popup_return_content($type, $download_url, $title = '') {
  switch ($type) {
    case 'download':
      return array(
        'status' => TRUE,
        'title' => t('Download'),
        'content' => theme('elib_popup_download_info', array(
          'message' => t('Book download url.'),
          'link' => $download_url,
        )),
        'final' => true
      );
      break;

    case 'stream':
      // it can be void= or id=, we explode by "id=" that correcponds to both situations.
      $key = explode('id=', (string)$download_url);
      /*
       *  Get client platform and use flash or livestream for iOS devices
       */
      $platform = publizon_get_client_platform();
      $response = array();

      if ($platform == PUBLIZON_PLATFORM_IOS) {
        $stream = elib_popup_stream_url($key[1], 'livestream');
        $response['content'] = theme('elib_popup_stream_ios', array('link' => $stream, 'title' => $title));
      } else {
        $stream = elib_popup_stream_url($key[1]);
        $response['stream'] = url('publizon/stream/redirect', array('query' => 'url=' . $stream));
      }

      $response['status'] = TRUE;
      $response['title'] = t('Stream');
      $response['processed'] = TRUE;
      $response['platform'] = $platform;
      return $response;
  }
}

function elib_popup_stream_url($key, $player = 'flash') {
  $url =  "http://service.pubhub.dk/Download.aspx?id=";
  return $url . $key .'&player=' . $player . '&stream=true';
}

/**
 *
 */
function elib_popup_download_sample($isbn) {

  try {
    $product = new PublizonProduct($isbn);

    if (!empty($product->teaser_link)) {
      $platform = publizon_get_client_platform();
      if ($platform == PUBLIZON_PLATFORM_GENERIC) {
        $status = array(
          'status' => TRUE,
          'title' => t('Sample'),
          'content' => theme('elib_popup_sample_generic', array(
              'title' => $product->title,
              'link' => $product->teaser_link)
          ),
          'file' => $product->teaser_link,
          'itemTitle' => $product->title,
          'itemAuthor' =>  $product->author['firstname'] . ' ' . $product->author['lastname'],
        );
      } elseif ($platform == PLATFORM_IOS) {
        $status = array(
          'status' => TRUE,
          'title' => t('Sample'),
          'content' => theme('elib_popup_sample_ios', array(
            'title' => $product->title,
            'link' => $product->teaser_link,
          )),
        );
      }
    }
  }
  catch (Exception $e) {
    // User was not logged in.
    $status = array(
      'status' => FALSE,
      'title' => t('Error'),
      'content' => theme('elib_popup_notice', array(
        'message' => $e->getMessage(),
      )),
    );
  }

  drupal_json($status);
  exit(0);
}

/**
 * Provides item loan/check routine for elib service.
 *
 * @global $user
 *   Logged in user data
 * @param string $isbn
 *  Product ISBN number
 * @param string $type
 *  The type of action to take.
 */
function elib_popup_download_loan_initial($isbn, $type = "download") {
  global $user;
  $status = array();

  // Whether user authenticated in drupal
  if ($uid = publizon_user_is_logged_in()) {
    try {
      $loans = new PublizonUserLoans($uid);
      if ($loans->isLoan($isbn)) {
        $down_link = $loans->loans[$isbn]->download_url;
        if ($down_link != '') {
          $status = _elib_popup_return_content($type, $down_link, $loans->loans[$isbn]->title);
        }
        else {
          $status = array(
            'status' => FALSE,
            'title' => t('Error'),
            'content' => theme('elib_popup_notice', array(
              'message' => t('Failed to fetch download URL.'))
            )
          );
        }
      }
      else {
         // Not a loan, yet.
        $down_link = $loans->createLoan($isbn);

        // If no exception was thrown, the loan went through.
        $status = _elib_popup_return_content($type, $down_link, $loans->loans[$isbn]->title);
      }
    }
    catch (Exception $e) {
      $status = array(
        'status' => FALSE,
        'title' => t('Error'),
        'content' => theme('elib_popup_notice', array(
          'message' => t('@message', array('@message' => $e->getMessage()))
        )),
      );
    }
  }
  else {
    // User was not logged in.
    $status = array(
      'status' => FALSE,
      'title' => t('Error'),
      'content' => theme('elib_popup_notice', array('message' => t('Only authenticated users are able to loan.')))
    );
  }

  // Send response
  drupal_json($status);
  exit(0);
}

/**
 * More a dummy method, used only for confirmation dialog retrieval.
 *
 * @param $isbn
 *  Product ISBN number.
 */
function elib_popup_loan_popup($isbn, $type = 'download') {
  $status = array();

  // Whether user is logged in.
  if ($uid = publizon_user_is_logged_in()) {
    // Check if item is already loaned
    $loans = new PublizonUserLoans($uid);
    if ($loans->isLoan($isbn)) {
      $status = _elib_popup_return_content($type, $loans->loans[$isbn]->download_url, $loans->loans[$isbn]->title);
    } else {
      $status = array(
        'title' => t('Confirm loan'),
        'content' => theme('elib_popup_download_approve', array('item' => ''))
      );
    }
  }
  else {
    // User was not logged in, so present login form.
    $form = drupal_get_form('elib_popup_login_form');
    $status = array(
      'status' => 'login',
      'title' => t('Login'),
      'content' => $form,
    );
  }

  drupal_json($status);
  exit(0);
}

/**
 * Build popup login form based on the user_login in form used to login normally
 * and overrides the validation functions.
 *
 * @return array $form.
 */
function elib_popup_login_form() {
  $form_id = 'user_login';
  $form_state = array();

  // Get user login form.
  $form = call_user_func_array('drupal_retrieve_form', array($form_id));

  // Run hook_form_alter functions.
  $hook = 'form_alter';
  foreach (module_implements($hook) as $module) {
    $function = $module . '_' . $hook;
    $function($form, $form_state, $form_id);
  }

  // Override validate function.
  $form['#validate'][0] = 'elib_popup_login_form_validate';

  return $form;
}

/**
 * Form validation for popup login form, which returns json.
 */
function elib_popup_login_form_validate($form, &$form_state) {
  // Default status message.
  $status = array(
    'status' => FALSE,
    'title' => t('Error'),
    'content' => '<div class="messages error">' . t('Sorry, unrecognized username or password. <a href="@password">Have you forgotten your password?</a>', array('@password' => url('user/password'))) . '</div>',
  );

  // If no credentials are presented, return.
  if (empty($form_state['values']['name']) || empty($form_state['values']['pass'])) {
    drupal_json($status);
    exit(0);
  }

  // The user may use both borrower card / cpr number to login, so we have to
  // remove anything thats not an number form the user name.
  $login_id = preg_replace('/\D+/', '', $form_state['values']['name']);

  // Try to login to the library, this will create the user if login succeed
  // and the user do not exists in Drupal.
  $account = publizon_user_authentication($login_id, $form_state['values']['pass'], $form_state['values']['retailer_id']);
  if ($account) {
    global $user;
    $user = $account;
    user_authenticate_finalize($form_state['values']);
    $status = array(
      'status' => 'loggedin',
      'title' => t('Login'),
      'content' => t('You are now logged in an can procceed'),
    );
  }

  drupal_json($status);
  exit(0);
}
