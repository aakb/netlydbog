<?php
/**
 * @file
 * Ting search carousel module main file.
 */

/**
 * Implements hook_menu().
 */
function ting_search_carousel_menu() {
  $items = array();

  $items['ting_search_carousel/results/ajax'] = array(
    'title' => 'Show search carousel results',
    'page callback' => 'ting_search_carousel_result',
    'access arguments' => array('access content'),
    'file' => 'ting_search_carousel.pages.inc',
    'type' => MENU_CALLBACK,
  );

  $items['admin/settings/ting_search_carousel'] = array(
    'title' => 'Ting search carousel',
    'page callback' => 'ting_search_carousel_admin_page',
    'access arguments' => array('administer search carousel'),
    'file' => 'ting_search_carousel.admin.inc',
  );

  $items['admin/settings/ting_search_carousel/form/ahah'] = array(
    'title' => 'Edit search carousels',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ting_search_carousel_form_ahah'),
    'access arguments' => array('administer search carousel'),
  	'file' => 'ting_search_carousel.admin.inc',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_prem().
 */
function ting_search_carousel_perm() {
  return array('administer search carousel');
}

/**
 * Implements hook_theme().
 */
function ting_search_carousel_theme() {
  return array(
    'ting_search_carousel' => array(
      'arguments' => array('searches' => NULL),
      'template' => 'templates/ting_search_carousel',
      'file' => 'ting_search_carousel.theme.inc',
    ),
    'ting_search_carousel_collection' => array(
      'arguments' => array('collection' => NULL),
      'template' => 'templates/ting_search_carousel_collection',
      'file' => 'ting_search_carousel.theme.inc',
    ),
    'ting_search_carousel_search' => array(
      'arguments' => array('element' => NULL),
      'file' => 'ting_search_carousel.theme.inc',
    ),
    'ting_search_carousel_admin_form' => array(
      'arguments' => array('form' => NULL),
      'file' => 'ting_search_carousel.theme.inc',
    ),
  );
}

function ting_search_carousel_block($op = 'list', $delta = 0, $edit = array()) {
  $blocks = array();

  switch ($op) {
    case 'list':
      $blocks[0] = array(
        'info' => 'Search carousel (backport)',
        'cache' => BLOCK_NO_CACHE,
      );
      break;

    case 'view':
      $blocks = array(
        'content' => theme('ting_search_carousel', array(
          'searches' => variable_get('ting_carousel_search_queries', array()),
        )),
      );
      break;
  }

  return $blocks;
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function ting_search_carousel_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' || $module == 'panels') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Perform a ting search, retrieve covers and store some of data in cache.
 *
 * @param int $index
 *  Search carsousel tab index.
 */
function ting_search_carousel_do_request($index) {
  // Get query based in the index parameter.
  $queries = variable_get('ting_carousel_search_queries', array());
  $query = isset($queries[$index]) ? $queries[$index] : FALSE;

  // If a query is defined, do a look-up else do nothing.
  if ($query) {
    // Load the ting client.
    module_load_include('client.inc', 'ting');

    // Try to fetch results 50 at a time.
    $result = NULL;
    $page = 1;
    $collections = array();
    while ($result = ting_do_search($query['query'], $page++, 50, array('facets' => array(), 'enrich' => FALSE, 'allObjects' => FALSE))) {
      $collections[] = $result;

      if (!$result->more) {
        // If no more result exists break the loop.
        break;
      }
    }
  }

  // Loop over the search results collecting basic object information.
  $local_ids = array();
  $objects = array();
  foreach ($collections as $collection) {
    foreach ($collection->collections as $ting_collection) {
      foreach ($ting_collection->objects as $object) {
        $local_ids[] = $object->localId;
        $objects[$object->localId] = array(
          'id' => $object->id,
          'isbn' => isset($object->record['dc:identifier']['oss:PROVIDER-ID'][0]) ? $object->record['dc:identifier']['oss:PROVIDER-ID'][0] : '',
          'title' => isset($object->record['dc:title'][''][0]) ? $object->record['dc:title'][''][0] : '',
          'creator' => publizon_get_authors($object, FALSE),
        );
      }
    }
  }

  $items = array();
  foreach ($local_ids as $id) {
    try {
      // Load product to get cover image and cache product.
      $product = new PublizonProduct($objects[$id]['isbn']);

      // Build object with the information collected, if it has an cover image.
      if (isset($product->cover)) {
        $item = new stdClass();
        $item->id = $objects[$id]['id'];
        $item->title = $objects[$id]['title'];
        $item->creator = $objects[$id]['creator'];
        $item->image = $product->getCover('120_x');

        $items[] = $item;
      }
    }
    catch (Exception $e) {
      // There is not much we can do about an error in fetching a product in the
      // search carousel.
    }
  }

  // Update the cache with the fetched items.
  _ting_search_carousel_set_cache($index, $items);
}

/**
 * Implementation of hook_elements().
 */
function ting_search_carousel_elements() {
  $types = array();
  $types['ting_search_carousel_search'] = array(
    '#input' => TRUE,
    '#process' => array('ting_search_carousel_search_element_process'),
    '#element_validate' => array('ting_search_carousel_search_element_validate'),
    '#default_value' => array(
      'sort' => 0,
      'title' => '',
  		'subtitle' => '',
  		'query' => '',
    ),
  );
  return $types;
}

/**
 * Process callback to expand our form element into several fields.
 */
function ting_search_carousel_search_element_process($element, $form_state) {
  $element['#tree'] = TRUE;

  if (!isset($element['#value'])) {
    $element['#value'] = $element['#default_value'];
  }
  else {
    $element['#value'] += $element['#default_value'];
  }

  $element['sort'] = array(
    '#type' => 'weight',
    '#delta' => 10,
    '#default_value' => (isset($element['#sort'])) ? $element['#sort'] : $element['#value']['sort'],
    '#attributes' => array('class' => 'sort-hidden'),
  );

  $element['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Title'),
  	'#description' => t('The title of the search is used for the tab in the carousel. Keep it short.'),
  	'#default_value' => $element['#value']['title'],
  );

  $element['subtitle'] = array(
    '#type' => 'textfield',
    '#title' => t('subtitle'),
  	'#description' => t('The subtitle displayed next to the search results'),
    '#default_value' => $element['#value']['subtitle'],
  );
  $element['query'] = array(
    '#type' => 'textfield',
    '#title' => t('Query'),
    '#maxlength' => 2048,
    '#description' => t('The query to display search results for'),
  	'#default_value' => $element['#value']['query'],
  );
  $element['remove'] = array(
    '#type' => 'button',
    '#submit' => FALSE,
    '#value' => t('Remove'),
    '#attributes' => array('class' => 'remove')
	);

  return $element;
}

/**
 * Our element's validation function.
 */
function ting_search_carousel_search_element_validate($element, &$form_state) {
  return $form;
}

/**
 * Returns the content for a search carousel tab. It utilizes both static and
 * database cache to optimize the cover page search. It will slowly fill the
 * cache based on the tab index provide. This index matches the search carousel
 * query index set in the administration backend, when defining the tabs.
 *
 * If no cache is found it tries to search the data well and calls it self once
 * more to fetch the newly fetch data. If data still do not exists in the cache
 * an empty string is returned.
 *
 * @param int $index
 *  Search carsousel tab index.
 *
 * @param bool $search
 *  If FALSE an attempt to fetch data _not_ be tried. Defaults to TRUE.
 *
 * @return mixed
 *  Returns an array with ting covers or the empty string if non is found.
 */
function _ting_search_carousel_get_content($index, $search = TRUE) {
  // Utilize the static cache.
  static $static;
  if (isset($static[$index]) && !empty($static[$index])) {
    return $static[$index];
  }

  // Check if there is a database cache of the search results.
  if ($cache = cache_get('ting_search_carousel_result')) {
    // Get cached data and store it in the static cache.
    $data = $cache->data;
    $static = $data;

    // Check if data exists for the index.
    if (isset($data[$index]) && !empty($data[$index])) {
      return $data[$index];
    }
  }

  // No cache found for that index, so try getting information from the
  // data well and cover service.
  if ($search) {
    ting_search_carousel_do_request($index);
    return _ting_search_carousel_get_content($index, FALSE);
  }

  // No form for cached data was found.
  return '';
}

/**
 * Set database cache base on tab index in the front-end.
 *
 * @param int $index
 *  Search carsousel tab index.
 *
 * @param mixed $items
 *  Search carousel items, containing id, title, creator and image url.
 */
function _ting_search_carousel_set_cache($index, $items) {
  $data = array();
  if ($cache = cache_get('ting_search_carousel_result')) {
    $data = $cache->data;
  }
  $data[$index] = $items;
  cache_set('ting_search_carousel_result', $data, 'cache');
}

/**
 * Wrapper function that adds the modules JavaScript.
 */
function _ting_search_carousel_add_javascript() {
  $path = drupal_get_path('module', 'ting_search_carousel');

  drupal_add_js($path . '/js/matchMedia.js');
  drupal_add_js($path . '/js/matchMedia.addListener.js');
  drupal_add_js($path . '/js/enquire.min.js');
  drupal_add_js($path . '/js/jquery.easing.1.3.min.js');
  drupal_add_js($path . '/js/jquery.elastislide.min.js');
  drupal_add_js($path . '/js/ting_search_carousel.min.js');
}

/**
 * Wrapper function that adds the modules css.
 */
function _ting_search_carousel_add_css() {
  $path = drupal_get_path('module', 'ting_search_carousel');
  drupal_add_css($path . '/css/ting_search_carousel.css');
}