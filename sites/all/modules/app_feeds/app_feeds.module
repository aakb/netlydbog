<?php
/**
 * @file
 * Generates feeds to use with the iOS/Android application.
 *
 * @todo: create admin interface to adjust the number of items in the feed.
 */

include_once 'includes/app_feed.inc';

/**
 * Implements hook_menu().
 */
function app_feeds_menu() {
  $items = array();

  $items['feeds/frontpage.xml'] = array(
    'title' => 'Frontpage application feed',
    'description' => 'Generated feed with news, video, author portraits and recommandations',
    'page callback' => 'app_feeds_frontpage',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['feeds/books.xml'] = array(
    'title' => 'Selected books',
    'description' => 'Generated feed with items from the frontpage carousel.',
    'page callback' => 'app_feeds_books',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['feeds/searches.xml'] = array(
    'title' => 'Menu keyword menu search strings',
    'description' => 'Generated feed with dropdown keyword menu search strings.',
    'page callback' => 'app_feeds_key_searchs',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Menu callback to generate frontpage feed.
 */
function app_feeds_frontpage() {
  $feed = new AppFeed();

  // Add news to the feed.
  app_feeds_build_news($feed);

  // Add video to the feed.
  app_feeds_build_video($feed);

  // Add author portraits to the feed.


  // Add recommendations to the feed.
  app_feeds_build_reviews($feed);

  $feed->send();
}

/**
 * Generate GUID based on private key and ID.
 *
 * @param $id
 *   The id to used to generate GUID.
 *
 * @return string
 *   MD5 hash of the GUID.
 */
function app_feeds_get_guid($id) {
  return md5(drupal_get_private_key() + $id);
}

/**
 * Filter content string to make it ready for the feed.
 *
 * This is mainly the nodes body field and is an hack that should be fixed
 * later and use ting reference field in the frontend.
 *
 * @param string $content
 *   The content to filter.
 *
 * @return string
 *   The filter content as HTML string.
 */
function app_feeds_filter_content($content) {
  // Remove "books" div from the HTML (HACK REMOVE LATER - jeskr).
  $content = preg_replace('/\<div id="books"\>.*\<\/div\>/' , ' ', $content);

  // Fix nbsp.
  $content = str_replace('&nbsp', '&amp;nbsp', check_plain($content));

  return $content;
}

/**
 * Helper function to generate news items and add the to the feed.
 *
 * @param AppFeed $feed
 *   The feed object to which the items are added.
 */
function app_feeds_build_news(AppFeed $feed) {
  // Get last news nodes.
  $nodes = app_feeds_load_nodes('article', 2);

  // Add each node to the feed.
  foreach ($nodes as $node) {
    // Build content array.
    $content = array(
      'source' => array(
        'tag' => 'source',
        'text' => 'netlydbog',
      ),
      'type' => array(
        'tag' => 'type',
        'text' => 'news',
      ),
      'date' =>  array(
        'tag' => 'date',
        'text' => $node->created,
      ),
      'title' =>  array(
        'tag' => 'title',
        'text' => $node->title,
      ),
      'description' =>  array(
        'tag' => 'description',
        'text' => app_feeds_filter_content($node->teaser),
      ),
      'content' => array(
        'tag' => 'content',
        'text' =>  app_feeds_filter_content($node->body),
      ),
      'link_content' => array(
        'tag' => 'link',
        'text' => url('node/' . $node->nid, array('absolute' => TRUE)),
        'attributes' => array(
          'type' => 'content',
        ),
      ),
      'link_thumbnail' => array(
        'tag' => 'link',
        'text' => url($node->field_image[0]['filepath'], array('absolute' => TRUE)),
        'attributes' => array(
          'type' => 'thumbnail',
        ),
      ),
    );

    // Add object id's if any.
    if (!is_null($node->field_books[0]['ting_object_id'])) {
      module_load_include('client.inc', 'ting');
      $content['books'] = array(
        'tag' => 'isbns',
        'children' => array(),
      );
      foreach ($node->field_books as $book) {
        $object = ting_get_object_by_id($book['ting_object_id']);
        if ($object) {
          $isbn = $object->record['dc:identifier']['oss:PROVIDER-ID'][0];
          $product = new PublizonProduct($isbn);
          $content['books']['children'][] = array(
            'tag' => 'isbn',
            'text' => $isbn,
            'attributes' => array(
              'cover' => url($product->cover, array('absolute' => TRUE)),
              'faust' => $object->localId,
            ),
          );
        }
      }
    }

    $feed->addItem(app_feeds_get_guid($node->nid), $content);
  }
}

/**
 * Helper function to generate review items and add the to the feed.
 *
 * @param AppFeed $feed
 *   The feed object to which the items are added.
 */
function app_feeds_build_reviews(AppFeed $feed) {
  $reviews = litteratursiden_feed_compare_get_cached_feed(2);

  foreach ($reviews['data'] as $review) {
    $product = new PublizonProduct($review['isbn']);
    $object = $product->getTingObject();
    $content = array(
      'source' => array(
        'tag' => 'source',
        'text' => 'netlydbog',
      ),
      'type' => array(
        'tag' => 'type',
        'text' => 'review',
      ),
      'date' =>  array(
        'tag' => 'date',
        'text' => $review['created'],
      ),
      'title' =>  array(
        'tag' => 'title',
        'text' => $review['title'],
      ),
      'description' =>  array(
        'tag' => 'description',
        'text' => app_feeds_filter_content($review['abstract']),
      ),
      'link_content' => array(
        'tag' => 'link',
        'text' => $review['link'],
        'attributes' => array(
          'type' => 'content',
        ),
      ),
      'link_thumbnail' => array(
        'tag' => 'link',
        'text' => url($product->cover, array('absolute' => TRUE)),
        'attributes' => array(
          'type' => 'thumbnail',
        ),
      ),
      'isbn' => array(
        'tag' => 'isbn',
        'text' => $review['isbn'],
        'attributes' => array(
          'cover' => url($product->cover, array('absolute' => TRUE)),
          'faust' => $object->localId,
        ),
      ),
    );

    $feed->addItem(app_feeds_get_guid($review['isbn']), $content);
  }
}

/**
 * Helper function to generate video items and add the to the feed.
 *
 * @param AppFeed $feed
 *   The feed object to which the items are added.
 */
function app_feeds_build_video(AppFeed $feed) {
  // Get last news nodes.
  $nodes = app_feeds_load_nodes('video', 2);

  // Add each node to the feed.
  foreach ($nodes as $node) {
    // Build content array.
    $content = array(
      'source' => array(
        'tag' => 'source',
        'text' => 'netlydbog',
      ),
      'type' => array(
        'tag' => 'type',
        'text' => 'video',
      ),
      'date' =>  array(
        'tag' => 'date',
        'text' => $node->created,
      ),
      'title' =>  array(
        'tag' => 'title',
        'text' => $node->title,
      ),
      'description' =>  array(
        'tag' => 'description',
        'text' => app_feeds_filter_content($node->field_video_description[0]['value']),
      ),
      'link_content' => array(
        'tag' => 'link',
        'text' => $node->field_video_url[0]['value'],
        'attributes' => array(
          'type' => 'content',
        ),
      ),
    );


    // Get video image link.
    $video = ebog_embed_video_parse_url($node->field_video_url[0]['value']);
    $content['link_thumbnail'] = array(
      'tag' => 'link',
      'text' =>  'http://img.youtube.com/vi/' . $video['embed_code'] . '/0.jpg',
      'attributes' => array(
        'type' => 'thumbnail',
      ),
    );

    // Add object id's if any.
    if (!is_null($node->field_video_book[0]['ting_object_id'])) {
      module_load_include('client.inc', 'ting');
      $object = ting_get_object_by_id($node->field_video_book[0]['ting_object_id']);
      if ($object) {
        $isbn = $object->record['dc:identifier']['oss:PROVIDER-ID'][0];
        $product = new PublizonProduct($isbn);

        $content['isbn'] = array(
          'tag' => 'isbn',
          'text' => $isbn,
          'attributes' => array(
            'cover' => url($product->cover, array('absolute' => TRUE)),
            'faust' => $object->localId,
          ),
        );
      }
    }

    $feed->addItem(app_feeds_get_guid($node->nid), $content);
  }
}

/**
 * Loads x newest nodes.
 *
 * @param string $type
 *   The to of content type to load.
 * @param int $count
 *   The number of nodes to load.
 *
 * @return array
 *   Node object index by nid in an array.
 */
function app_feeds_load_nodes($type, $count) {
  $nodes = array();
  // @TODO add optional limit number.
  $result = db_query('SELECT nid FROM {node} WHERE type = "%s" AND status = 1 ORDER BY created DESC LIMIT %d', array($type, $count));
  while ($row = db_fetch_array($result)) {
    $nodes[$row['nid']] = node_load($row['nid']);
  }

  return $nodes;
}
