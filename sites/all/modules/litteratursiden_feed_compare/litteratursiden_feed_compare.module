<?php
/**
 * @file
 *
 */

/**
 * Implements hook_menu().
 */
function litteratursiden_feed_compare_menu() {
  $items = array();
  $items['admin/settings/litteratursiden_feed_compare'] = array(
    'title' => 'Litteratursiden feed compare',
    'description' => 'Litteratursiden feed compare',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('litteratursiden_feed_compare_admin'),
    'access arguments' => array('administer site configuration'),
    'file' => 'litteratursiden_feed_compare.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_theme().
 */
function litteratursiden_feed_compare_theme() {
  return array(
    'litteratursiden_feed_compare_front' => array(
      'arguments' => array('items' => NULL, 'conf' => NULL),
      'template' => 'litteratursiden_feed_compare_front',
    ),
    'litteratursiden_feed_compare_page' => array(
      'arguments' => array('items' => NULL, 'conf' => NULL),
      'template' => 'litteratursiden_feed_compare_page',
    ),
  );
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function litteratursiden_feed_compare_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' && !empty($plugin)) {
    return "plugins/$plugin";
  }
}

/**
 * Get cached search result from feed-to-TING search/parse process.
 */
function litteratursiden_feed_compare_get_cached_feed($items, $reset = FALSE, $shuffle = TRUE) {
  static $data;
  if (!isset($data) || $reset) {
    if (!$reset && ($cache = cache_get('litteratursiden_feed_compare_cache')) && !empty($cache->data)) {
      $data = $cache->data;
    }
    else {
      $lifetime = variable_get('litteratursiden_feed_compare_cache_lifetime', 43200);

      $data = litteratursiden_feed_compare_get_feed(variable_get('litteratursiden_feed_compare_items_on_page', '10'));
      if (isset($data['data'])) {
        cache_set('litteratursiden_feed_compare_cache', $data, 'cache', time() + $lifetime);
      }
      else {
        $data['data'] = array();
      }
    }
  }

  // Should they be shuffled.
  if ($shuffle) {
    shuffle($data['data']);
  }

  // Only return the number of reviews requested.
  $data['data'] = array_slice($data['data'], 0, $items);

  return $data;
}

/**
 * Convert TING object to array for serializing in cache.
 */
function litteratursiden_feed_compare_object_to_array($object) {
  $array = array();
  foreach ($object as $member => $data) {
    $array[$member] = $data;
  }
  return $array;
}


/**
 * Gets feed from litteratursiden.dk and performs search in TING datawell.
 */
function litteratursiden_feed_compare_get_feed($items) {
  module_load_include('client.inc', 'ting');

  $ret = array();
  $i = 0;
  $amount = 0;
  $feed_main_url = variable_get('litteratursiden_feed_compare_feed_url', 'http://www.litteratursiden.dk/service/recommendations');

  while ($i != 25) {
    $feed_url = $feed_main_url . '?count=20&offset=' . $i * 25;
    $feed_json_data = _litteratursiden_feed_compare_file_get_contents_curl($feed_url);
    $feed = json_decode($feed_json_data, TRUE);
    if (is_array($feed)) {
      if (isset($feed['error']) && $feed['error'] === TRUE) {
        break;
      }
      foreach ($feed as $key => $val) {
        if (is_numeric($key)) {
          $query = 'phrase.title="' . str_replace('"', '', $val['book_title']) . '" AND dc.type="ebog"';
          $search = ting_do_search($query, 1, 25);
          if ($search && $search->numTotalObjects == 1) {
            foreach ($search->collections as $collection) {
              foreach ($collection->objects as $object) {
                $isbn = $object->record['dc:identifier']['oss:PROVIDER-ID'][0];

                if (!empty($isbn)) {
                  try {
                    $book = new PublizonProduct($isbn);
                  }
                  catch (Exception $e) {
                    $ret['status'] = 'error';
                    $ret['message'] = $e;
                    return $ret;
                  }
                  if (!empty($book->title)) {
                    $ret['data'][] = array(
                      'title' => $book->title,
                      'isbn' => $isbn,
                      'author' => publizon_get_authors($object),
                      'created' => $val['credate'],
                      'abstract' => $val['description'],
                      'image' => $book->getCover('120_x'),
                      'url' => $object->url,
                      'link' => $val['link'],
                    );
                    $amount++;

                    // Post found so no need to loop over the other items found.
                    break 2;
                  }
                }
              }
            }
          }
        }
        if ($amount != $items && $amount > 0) {
          $ret['status'] = 'notfull';
        }
        elseif ($amount == $items) {
          $ret['status'] = 'ok';
          break 2;
        }
        else {
          $ret['status'] = 'empty';
        }
      }
    }
    $i++;
  }

  return $ret;
}

/**
 * Get item data from litteratursiden service.
 *
 * @param string $title
 *   Item title.
 * @param string $author
 *   The items author.
 * @param bool $encoded
 *   Default to FALSE and do not encode the other parameters.
 *
 * @return array
 *   Item data.
 */
function litteratursiden_feed_compare_get_item($title, $author, $encoded = FALSE) {
  if (!$encoded) {
    $title_enc = urlencode($title);
    $author_enc = urlencode($author);
  }
  $request_url = "http://www.litteratursiden.dk/service/netlydbog?title=$title_enc&author=$author_enc";
  $json_responce = _litteratursiden_feed_compare_file_get_contents_curl($request_url);
  $item_data = json_decode($json_responce, TRUE);
  return $item_data;
}

/**
 * Check if item exists in litteratursiden.
 *
 * @return boolean
 */
function litteratursiden_feed_compare_item_exists($title, $author, $encoded = FALSE) {
  $item = litteratursiden_feed_compare_get_item($title, $author, $encoded);
  return !$item['error'];
}

/**
 * Replacement for file_get_contents().
 */
function _litteratursiden_feed_compare_file_get_contents_curl($url) {
  $ch = curl_init();

  curl_setopt($ch, CURLOPT_HEADER, 0);
  // Set curl to return the data instead of printing it to the browser.
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
  curl_setopt($ch, CURLOPT_URL, $url);

  $data = curl_exec($ch);
  curl_close($ch);

  return $data;
}
