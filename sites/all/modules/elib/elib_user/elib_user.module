<?php

/**
 * @file
 * Handles login to the library systems, to ensure that the user has permisson
 * to download or stream a given book.
 *
 */

define('ELIB_USER_CACHE_PREFIX', 'elib_user_loans_');

/**
 * Implements hook_perm();
 */
function elib_user_perm() {
  return array('administer elib users');
}

/**
 * Implements hook_menu().
 */
function elib_user_menu() {
  $item = array();

  $item['admin/user/elib/search'] = array(
    'title' => 'User search',
    'description' => 'Search elib users',
    'page callback' => 'elib_user_search',
    'access arguments' => array('administer elib users'),
    'file' => 'includes/elib_user_search.inc',
  );

  $item['admin/user/elib/search/%uid'] = array(
    'title' => 'User search',
    'description' => 'Search elib users',
    'page callback' => 'elib_user_search',
    'page arguments' => array(4),
    'access arguments' => array('administer elib users'),
    'file' => 'includes/elib_user_search.inc',
  );

  $item['admin/user/elib/search/%uid/delete'] = array(
    'title' => 'Delete user',
    'description' => 'Delete elib user',
    'page callback' => 'elib_user_search_delete',
    'page arguments' => array(4),
    'access arguments' => array('administer elib users'),
    'file' => 'includes/elib_user_search.inc',
  );

  return $item;
}

/**
 * Implements hook_theme().
 */
function elib_user_theme($existing, $type, $theme, $path) {
  return array(
    'elib_user_search' => array(
      'arguments' => array('uid' => NULL, 'info' => NULL),
      'path' => $path . '/templates',
      'template' => 'elib_user_search',
    ),
  );
}

/**
 * Creates a unique identifier for a given user based on the input parameter.
 *
 * @param string $cardno
 * @return string MD5 seeded value of the input parameter.
 */
function elib_user_elib_id($cardno){
  /**
   * @todo: Moved seed value into settings.php and upgraded to SHA function.
   *
   */
  return md5(drupal_get_private_key() . $cardno);
}

function elib_user_get_elib_info(){
	return array(
	 'cardno',
	 'pin',
	 'retailerid'
	);
}

/**
 * Validate the user against the librarys sytems and creates the user if he/her
 * do no exists in Drupal.
 *
 * @param string $cardno
 * @param string $pin
 * @param string $lib
 * @return object $user if success or FALSE on failur.
 */
function elib_check_credentials($cardno, $pin, $lib) {
  // Get elib client for communication with the library system.
  $client = elib_client();

  // Set credentials in the client.
  $client->setLoaner($cardno, $pin, $lib);

  // Validate the user.
  if($client->validateUser()){
    /**
     *  @todo: do something else here preferably.
     */
    $_SESSION['ssn'] = $cardno;
    $_SESSION['pin'] = $pin;

    // Get the users account or create a new account.
    $account = elib_check_user($cardno, $lib);
    if (!$account) {
      // User have been validate, but no account was found. So lets create one.
      $random_name = $_SERVER['REQUEST_TIME'] . mt_rand();

      // User data to pass to user_save().
      $user_data = array(
        'name' => $random_name,
        'display_name' => 'unknown',
        'mail' => $random_name . '@mail.invalid',
        'pass' => microtime(TRUE) . mt_rand(), // Login via Drupal's standard login should not be possible.
        'status' => 1,
      );

      // If no e-mail was set in the XML, we need to generate a
      // random, invalid address,  since Drupal has a unique
      // constraint on the mail column in the users table.
      // Set the initial e-mail to the same e-mail-address.
      $user_data['init'] = $user_data['mail'];

      // Saves the user and returns the user UID.
      $account = user_save(NULL, $user_data);

      // Store user reference in our own table.
      db_query("INSERT INTO {elib_user} (uid, elib_id, elib_library) VALUES (%d, '%s', '%s');", $account->uid, elib_user_elib_id($cardno), $lib);
    }

    return $account;
  }
  return false;
}

/**
 * Loades an users account based on card number.
 *
 * @param type $cardno
 * @return type
 */
function elib_check_user($cardno, $lib) {
  // Check if user is known in the systemt.
  $elib_id = elib_user_elib_id($cardno);
  $uid = db_result(db_query("SELECT uid FROM {elib_user} WHERE elib_id = '%s'", $elib_id));
  if ($uid) {
    db_query("UPDATE {elib_user} SET elib_library = %d WHERE elib_id = '%s'", $lib, $elib_id);
    return user_load(array('uid' => $uid));
  }

  // Test if old encoding is used (security fix) and update it.
  $uid = db_result(db_query("SELECT uid FROM {elib_user} WHERE elib_id = md5('%s')", $cardno));
  if ($uid) {
    db_query("UPDATE {elib_user} SET elib_library = %d, elib_id = '%s' WHERE elib_id = md5('%s')", $lib, $elib_id, $cardno);
    return user_load(array('uid' => $uid));
  }

  return FALSE;
}

/**
 * Fetch the current logged in users library credentials or for the uid parsed
 * to the function.
 *
 * @global object $user
 * @param string $uid user identifier
 * @return array user credentials (ssn, pin, lib, user name)
 */
function elib_user_get_cred($uid = FALSE){
	if(!$uid){
	  global $user;
	  $uid = $user->uid;
	}
  $elibuser = db_fetch_array(db_query('SELECT * FROM {elib_user} WHERE uid = %d', $uid));

  /**
   * @todo: Why not save every ting in the session ?
   */

	return array(
	 'cpr' => $_SESSION['ssn'],
	 'pin' => $_SESSION['pin'],
	 'lib' => $elibuser['elib_library'],
	 'user' => $elibuser['elib_username'],
	);
}

function elib_user_block($op = 'list', $delta = 0) {
  $block = array();
  switch ($op) {
    case 'list':
      $block = array(
        'account' => array(
          'info' => t('Mine lån'),
          'cache' => BLOCK_NO_CACHE,
          'status' => 1,
        ),
      );
      return $block;
      break;

    case 'view':
      if ($delta == 'account') {
        $out = array();
        $loans = elib_user_get_loans();

        // It's assumed in the $bookdisplay array that two books can't have the
        // same loan expire date.
        if ($loans && isset($loans->orderitem)) {
          module_load_include('client.inc', 'ting');

          foreach ($loans->orderitem as $book) {
            if (!elib_user_is_loan_expired($book)) {
              $object = elib_get_ting_object_by_isbn(trim($book->book->attributes()->id));
              if (isset($object) && $object) {
                $bookdisplay[elib_str_to_time((string)$book->loanexpiredate[0], TRUE)] = elib_displaybook($object, $book);
              }
              else {
                $bookdisplay[elib_str_to_time((string)$book->loanexpiredate[0], TRUE)] = elib_displaybook_loan($book);
              }
            }
          }
          ksort($bookdisplay);

          foreach ($bookdisplay as $book) {
            $out[] = '<div class="display-book biglist">' . $book . '</div>';
          }
        }
        else {
          $out[] = t('Du har ingen aktive ebogslån.');
        }
      }
      break;
  }

  $block['subject'] = t('Mine lån');
  $block['content'] = implode($out);
  return $block;
}

function elib_user_cleanuploans(&$loans) {
  // Some problem occur when an object passed by refference is empty, the
  // validation is done before function call instead
  $count = sizeof($loans);
  for ($i = $count - 1; $i >= 0; $i--) {
    $id = $loans[$i]->orderstatus['id'];
    $expiredate = $loans[$i]->loanexpiredate;
    if ((intval($id) != 1) || (strtotime($expiredate) < time())) {
      unset($loans[$i]);
    }
  }
}

/**
 * Wrapper function that gets the current logged in users loans from cache or
 * elib backend.
 *
 * @param boolean $reset
 *   Don't use the cache, defaults to FALSE.
 */
function elib_user_get_loans($reset = FALSE) {
  global $user;

  // Try to get loans from the cache.
  $loans = elib_user_get_loans_cache($user->uid);
  if (!$loans || $reset) {
    // Get user information.
    $userinfo = elib_user_get_cred();

    // Verify user
    elib_client()->setLoaner($userinfo['cpr'], $userinfo['pin'], $userinfo['lib']);
    try {
      $loans = elib_client()->getLoans();
      $loans = isset($loans->data) ? $loans->data : FALSE;
      if ($loans) {
        global $user;
        elib_user_set_loans_cache($user->uid, $loans);
      }
    } catch (Exception $e) {
      elib_display_error($e);
    }
  }

  return $loans;
}

/**
 * Check if a given book is loaned by the current user.
 *
 * @param type $isbn
 *  The ISBN of the book to be checked.
 * @param
 *  Check if the loan has expired.
 * @return boolean
 *  TRUE is returned if book is loaned by the current user else FALSE
 */
function elib_user_is_loan($isbn, $expired = FALSE) {
  $loans = elib_user_get_loans();
  if ($loans) {
    foreach ($loans->orderitem as $book) {
      if (in_array($book->book->attributes()->id, $isbn)) {
        if ($expired) {
          return !elib_user_is_loan_expired($book);
        }
        return TRUE;
      }
    }
  }
  return FALSE;
}

/**
 * Checks a give loan to see if it have expired.
 *
 * @param SimpleXMLElement $loan
 *  A single loan representation from publizon
 * @return boolean
 *  If the loan has expired TRUE else FALSE
 */
function elib_user_is_loan_expired(SimpleXMLElement $loan) {
  if ((elib_str_to_time($loan->loanexpiredate, true) - time()) > 0) {
    return FALSE;
  }
  return TRUE;
}

/**
 * Wrapper function to save users loans to local cache.
 *
 * @param type $uid
 * @param type $loans
 */
function elib_user_set_loans_cache($uid, $loans) {
  $data = $loans->asXML();
  cache_set(ELIB_USER_CACHE_PREFIX . $uid, $data, 'cache', strtotime('+24 hours'));
}

/**
 * Wrapper function to get cached version of a users loans.
 *
 * @param type $uid
 * @return boolean
 */
function elib_user_get_loans_cache($uid) {
  $cache = cache_get(ELIB_USER_CACHE_PREFIX . $uid, 'cache');
  if (isset($cache->data)) {
    return simplexml_load_string($cache->data);
  }
  return FALSE;
}

/**
 * Wrapper function to handle cache clear of a users loans.
 *
 * @param type $uid
 * @param type $all
 */
function elib_user_clear_loans_cache($uid, $all = FALSE) {
  if ($all) {
    cache_clear_all(ELIB_USER_CACHE_PREFIX, 'cache', TRUE);
  }
  else {
    cache_clear_all(ELIB_USER_CACHE_PREFIX . $uid, 'cache');
  }
}