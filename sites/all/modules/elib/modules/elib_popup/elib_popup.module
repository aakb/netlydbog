<?php
/**
 * @file
 *
 * elib popup main module file.
 *
 */

/**
 * Implementation of hook_init.
 */
function elib_popup_init() {
  if (!defined('ELIB_POPUP_PATH')) {
    define('ELIB_POPUP_PATH', drupal_get_path('module', 'elib_popup'));
  }
  
  drupal_add_js(ELIB_POPUP_PATH . '/js/elib_popup_download.js', 'file');
  drupal_add_js(ELIB_POPUP_PATH . '/js/elib_popup_sample.js', 'file');
  drupal_add_js(drupal_get_path('theme', 'ebog') . '/js/audio-player/audio-player.js', 'file');
  drupal_add_js(array('elib_popup' => array('theme_path' => drupal_get_path('theme', 'ebog'))), 'setting');
  drupal_add_css(ELIB_POPUP_PATH . '/css/elib_popup_style.css', 'file');
  jquery_ui_add(array('ui.dialog', 'ui.draggable'));
  jquery_ui_theme_load();
}

/**
 * Implementation of hook_menu.
 */
function elib_popup_menu() {
  $menu = array();

  $menu['ting/object/%/download/request'] = array(
    'title' => 'Download ting ebook',
    'description' => 'Checker for download abilities regarding selected ebook for specific user.',
    'page callback' => 'elib_popup_download_loan_initial',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $menu['ting/object/%/download/popup'] = array(
    'title' => 'Show a popup before download',
    'description' => 'Display some user specific text and perform some check before download.',
    'page callback' => 'elib_popup_loan_popup',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  
  $menu['ting/object/%/stream/popup'] = array(
    'title' => 'Show a popup before stream',
    'description' => 'Display some user specific text and perform some check before stream.',
    'page callback' => 'elib_popup_loan_popup',
    'page arguments' => array(2, 'stream'),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
   
  $menu['ting/object/%/stream/request'] = array(
    'title' => 'Download ting ebook',
    'description' => 'Checker for stream abilities regarding selected book for specific user.',
    'page callback' => 'elib_popup_download_loan_initial',
    'page arguments' => array(2, 'stream'),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  
  $menu['ting/object/%/sample/popup'] = array(
    'title' => 'Stream sample book',
    'description' => 'Stream sample audio book.',
    'page callback' => 'elib_popup_download_sample',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $menu['elib/stream/redirect'] = array(
    'title' => 'Stream sample book',
    'description' => 'Redirect to external stream domain.',
    'page callback' => 'elib_popup_stream_redirect',
    'page arguments' => array(),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $menu;
}

/**
 * Implementation of hook_theme.
 */
function elib_popup_theme($existing, $type, $theme, $path) {
  $hooks = array();

  $hooks['elib_popup_download_approve'] = array(
    'arguments' => array('data' => NULL),
    'template' => 'templates/elib_popup-download-approve',
  );

  $hooks['elib_popup_notice'] = array(
    'arguments' => array('data' => NULL),
    'template' => 'templates/elib_popup-notice',
  );

  $hooks['elib_popup_download_info'] = array(
    'arguments' => array('data' => NULL),
    'template' => 'templates/elib_popup-download-info',
  );
  
  $hooks['elib_popup_stream_info'] = array(
    'arguments' => array('data' => NULL),
    'template' => 'templates/elib_popup-stream-info',
  );
  
  $hooks['elib_popup_sample_generic'] = array(
    'arguments' => array('data' => NULL),
    'template' => 'templates/elib_popup-sample-generic',
  );

  $hooks['elib_popup_sample_ios'] = array(
    'arguments' => array('data' => NULL),
    'template' => 'templates/elib_popup-sample-ios',
  );

  $hooks['elib_popup_stream_ios'] = array(
    'arguments' => array('data' => NULL),
    'template' => 'templates/elib_popup-stream-ios',
  );
  
  return $hooks;
}

/**
 * Redirect streaming to pubhub
 */
function elib_popup_stream_redirect() {
  header("location:".$_GET['url'] . '&player=' . $_GET['player'] . '&stream=' . $_GET['stream']);
  exit();
}

/**
 * Return content for download or stream
 * @param type $type
 * @param type $downloadUrl 
 */
function _elib_popup_return_content($type = 'download', $downloadUrl) {
  switch ($type) {
    case 'download': 
      return array(
        'status' => TRUE,
        'title' => t('Success'),
        'content' => theme('elib_popup_download_info', array('message' => t('Book download url.'), 'link' => $downloadUrl)),
        'final' => true
      );
    case 'stream':
      // it can be void= or id=, we explode by "id=" that correcponds to both situations.
      $key = explode('id=', (string)$downloadUrl);
      /*
       *  Get client platform and use flash or livestream for iOS devices
       */
      $platform = elib_check_platform();
      $response = array();

      if ($platform == PLATFORM_IOS) {
        $stream = elib_client()->getStreamUrl($key[1], 'livestream');
        $response['content'] = theme('elib_popup_stream_ios', array('link' => $stream));
      } else {
        $stream = elib_client()->getStreamUrl($key[1]);
        $response['stream'] = url('elib/stream/redirect', array('query' => 'url=' . $stream));
      }
      
      $response['status'] = TRUE;
      $response['title'] = t('Success');
      $response['processed'] = TRUE;
      $response['platform'] = $platform;
      return $response;
  }
}

/**
 * 
 */
function elib_popup_download_sample($ting_id) {
  module_load_include('client.inc', 'ting');
  module_load_include('isbn_static_func.inc', 'elib');
  $object = ting_get_object_by_id($ting_id);
  
  $isbn = preg_replace('/[^0-9]+/', '', $object->record['dc:identifier']['dkdcplus:ISBN'][0]);

  $c = elib_client();
  $c->setLibrary(variable_get('elib_retailer_id', ''));
  
  try {
    $book = $c->getBook($isbn);
  }
  catch (Exception $e) {
    error_log(__FILE__ . ' +' . __LINE__ . ' ' . print_r($e, 1));
    return;
  }

  $teasersamplelink = (string)$book->data->teaser->link;

  if (!empty($teasersamplelink)) {
    $title = (string)$book->data->title;
    
    $platform = elib_check_platform();
    if ($platform == PLATFORM_GENERIC) {
      $status = array(
        'status' => TRUE,
        'title' => t('Sample'),
        'content' => theme('elib_popup_sample_generic', array(
            'title' => $title,
            'link' => $teasersamplelink)),
         'file' => $teasersamplelink,
         'itemTitle' => $title,
         'itemAuthor' =>  (string)$book->data->contributors[0]->first_name 
              . ' ' 
              . (string)$book->data->contributors[0]->family_name
       );
    } elseif ($platform == PLATFORM_IOS) {
      $status = array(
        'status' => TRUE,
        'title' => t('Sample'),
        'content' => theme('elib_popup_sample_ios', array(
            'title' => $title,
            'link' => (string)$book->data->teaser->link))
      );
    }
  }
  
  echo json_encode($status);
  exit(0);
}
/**
 * Provides item loan/check routine for elib service.
 *
 * @global $user
 *   Logged in user data
 * @param $ting_id Ting object id
 * @param $type string 
 */
function elib_popup_download_loan_initial($ting_id, $type = "download") {
  global $user;
  $status = array();

  // Whether user authenticated in drupal
  if ($user->uid) {
    $isbn = elib_get_isbn_from_object_id($ting_id);
    $ean = convertToEAN($isbn);

    $userinfo = elib_user_get_cred();
    $client = elib_client();
    $client->setLoaner($userinfo['cpr'], $userinfo['pin'], $userinfo['lib']);
    
    $book = $client->getBook($ean);
    $down_link = get_download_url($client->getLoans(), $ean);
    $loaned = (is_string($down_link)) ? TRUE : FALSE;

    // Whether book fetched well
    if ((int)$book->status->code == 101) {
      if ($loaned) {
        if ($down_link != '') {
          $status = _elib_popup_return_content($type, $down_link);
        }
        else {
          $status = array(
            'status' => FALSE,
            'title' => t('Error'),
            'content' => theme('elib_popup_notice', array(
              'message' => t('Failed to fetch download URL.'))
            )
          );
        }
      }
      else {
        $loan = elib_client()->makeLoan($ean);
        // Whether book loaned well
        if ((int)$loan->status->code == 101) {
          $down_link = $loan->data->downloadurl;
          $status = _elib_popup_return_content($type, $down_link);
        }
        else {
          $status = array(
            'status' => FALSE,
            'title' => t('Error'),
            'content' => theme('elib_popup_notice', array(
              'message' => t('@message', array('@message' => $loan->status->message)))
            )
          );
        }
      }
    }
    else {
      $status = array(
        'status' => FALSE,
        'title' => t('Error'),
        'content' => theme('elib_popup_notice', array(
          'message' => t('@message', array('@message' => $book->status->message)))
        )
      );
    }
  }
  else {
    $status = array(
      'status' => FALSE,
      'title' => t('Error'),
      'content' => theme('elib_popup_notice', array('message' => t('Only authenticated users are able to loan.')))
    );
  }

  // Send response
  echo json_encode($status);
  exit(0);
}

/**
 * Fetch specific book download url.
 *
 * @param SimpleXMLElement $loans
 *   User loans object
 * @param String $ean
 *   Searched item isbn
 * @return String
 *   Download url
 */
function get_download_url($loans, $ean) {
  if ($loans instanceof SimpleXMLElement) {
    foreach ($loans->data->orderitem as $book) {
      if ($book->book['id'] == $ean && $book->loanstate == 1) {
        return (string)$book->data->data->downloadurl;
      }
    }
  }

  return FALSE;
}

/**
 * Check if the book is loaned
 */
function _elib_popup_is_loaned($ting_id) {
  $isbn = elib_get_isbn_from_object_id($ting_id);
  $ean = convertToEAN($isbn);

  $userinfo = elib_user_get_cred();
  $client = elib_client();
  $client->setLoaner($userinfo['cpr'], $userinfo['pin'], $userinfo['lib']);

  $book = $client->getBook($ean);
  $down_link = get_download_url($client->getLoans(), $ean);
  return (is_string($down_link)) ? $down_link : FALSE;
}
/**
 * More a dummy method, used only for confirmation dialog retrieval.
 *
 * @param $ting_id
 *   Ting object id.
 */
function elib_popup_loan_popup($ting_id, $type = 'download') {
  global $user;
  $status = array();
  
  // Whether user is logged in.
  if ($user->uid) {
    // Check if item is lready loaned
    if (($link = _elib_popup_is_loaned($ting_id))) {
      $status = _elib_popup_return_content($type, $link);
    } else {
      $status = array(
        'title' => t('Confirm loan'),
        'content' => theme('elib_popup_download_approve', array('item' => ''))
      );
    }
  }
  else {
    $status = array(
      'status' => FALSE,
      'title' => t('Error'),
      'content' => theme('elib_popup_notice', array('message' => t('Only authenticated users are able to loan.')))
    );
  }

  echo json_encode($status);
  exit(0);
}
