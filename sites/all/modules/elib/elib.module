<?php 

function elib_menu() {
  $path  = drupal_get_path('module', 'elib') . '/includes';
  $items = array();
  
  $items['admin/settings/elib'] = array(
    'title'            => 'eLib settings',
    'description'      => 'settings for eLib SOAP webservice',
    'access arguments' => array('access administration pages'),
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('ting_admin_settings_form_elib'),
    'file'             => 'elib.admin.inc',
    'file path'        => $path,
  //  'type'             => MENU_LOCAL_TASK,
    'weight'           => 2,
  );
  /*$items['user/elib_login'] = array(
    //'title'            => 'eLib settings',
    //'description'      => 'settings for eLib SOAP webservice',
    'access arguments' => array('access content'),
    'page callback'    => 'elib_loginform',
    //'page arguments'   => array(''),
    //'file'             => 'elib.admin.inc',
    //'file path'        => $path,
  //  'type'             => MENU_LOCAL_TASK,
   // 'weight'           => 2,
  );*/
  $items['admin/settings/elib/main'] = array(
    'title' => 'eLib',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  
  $items['ting/object/%/stream'] = array(
    'title' => 'stream',
    'page callback' => 'elib_get_lydbog',
    'page arguments' => array(2,3),
    'access arguments' => array('access content'),
  );
  $items['ting/object/%/download'] = array(
    'title' => 'wma',
    'page callback' => 'elib_get_lydbog',
    'page arguments' => array(2,3),
    'access arguments' => array('access content'),
    
  );
  return $items;
}
function elib_theme() {
  return array(
    'page' =>  array(
      'template' => 'page-clean',
      'arguments' => array(
        'content' => NULL,
        'show_blocks' => TRUE,
        'show_messages' => TRUE,
      ),
   ),

  );
}



function elib_form_alter(&$form, $form_state, $form_id) {
  switch ($form_id) {
    case 'user_login':
    case 'user_login_block':
    	array_unshift($form['#validate'], 'elib_login_validate');
      //$form['#submit'][] = 'elib_login_submit';
    	break;
  }
}

function elib_get_isbn_from_object_id($oid){
  module_load_include('client.inc', 'ting');
  try {
    $object = ting_get_object_by_id($oid);
    $eliburl = $object->record['dc:identifier']['dcterms:URI'][0];
    $first = substr($eliburl,strpos($eliburl,'&id=')+4);
    $isbn = intval(substr($first,0,strpos($first,'&lib')));
  }
  catch (TingClientException $e) {
    // If the specified object id does not exist, an exception is throw.
  }
  return $isbn;
}



function elib_get_lydbog($tingObjectID,$format){
	
  global $user;
	//no user logged in
  if(!$user->uid){
    header('Location: /user/login/?'.drupal_get_destination().'&clean=1');
    exit();
  }
	
  $isbn = elib_get_isbn_from_object_id($tingObjectID);
  $userinfo = elib_user_get_cred();
	// verify user
  elib_client()->setLoaner($userinfo['cpr'],$userinfo['pin'],$userinfo['lib']);
  
  // kig om bogen allerede er lånt GetLibraryUserOrder
  
  // get all the books that are loaned!
  $loans = elib_client()->getLoans();
	
  $loans = $loans->orderitem;
  
  $alreadyloaned = false;
  $loanlimit = 1000000000000;
  if($loans){
    $nob = sizeof($loans);
		foreach($loans as $obj){
			
      if($loanlimit > elib_str_to_time($obj->loanexpiredate,true)){
        $loanlimit = elib_str_to_time($obj->loanexpiredate,true);
      }
			 
			 
			if(trim($obj->book['idtype']) == 'ISBN'){
			  if(trim($obj->book['id']) == $isbn){
			  	
			  	//krumo($obj);
			  	
			  	$response = elib_client()->GetUrl(intval($obj->retailerordernumber).'');
			  	
			  	// book is already loaned
			  	$alreadyloaned = true;
			  }	
			}
		}
	}
	if($alreadyloaned){
		// get local
		$src = $response->data->downloadurl;
    $content = '<iframe src="'.$src.'" class="audioplayer"></iframe>';
	}
	else{
		$response = elib_client()->makeLoan($isbn,$format);
		if($response->status->code == 120){
		// else show cart
		$libmax = elib_libraries_get_maxloans($userinfo['lib']);
		/*if($nob >= $libmax){
			$diff = $loanlimit-time();
			$days = floor($diff/86400);
			
			$rest = $diff % 86400;
			
			$hours = floor($rest/3600);
			
			$content  = t('<h1>Max grænse for lån opnået</h1>');
		  $content .= t("<p>Du har allerede lånt %books bøger og har derfor nået dit maximum</p><p>Læs mere om <a href='!link'>antal af lån</a> om måneden</p>",array('%books' => format_plural($nob, 'en bog', '@count bøger')));
		  $content .= t('<p>Du kan låne en lydbog igen om %dage og %time</p>', array('%dage' => format_plural($days, 'en dag', '@count dage'),'%time' => format_plural($hours, 'en time', '@count timer')));
		  $content .= t('<p>Der kommer en feature her hvor du kan tilføjge bogen til din huske liste!</p>');
		  
		  //$content .= 	t('<p>Lån igen om %s dage</p>',);
		}	*/
		
		}
		else{
			//var_dump($response);
			if($response->status->code == 101){
			 $src = $response->data->downloadurl;
			 $content = '<iframe src="'.$src.'" class="audioplayer"></iframe>';	
			}
			
			
		}
		// call create loan
		// if loan show stream and create local
		$status = $response->status->code;
	}
	//krumo($response);
	
	// hvis ikke bogen er lånt, så CreateLoan og opret lokal kopi i tabel elib_loan
	
	// ellers så hent lokal URL
	
	$content .= '<div class="status">ws status:'.$status.'</div>';
	
	return $content;
}

function elib_str_to_time($str,$aststamp = false){
	list($d,$t) = explode(" ",$str);
	list($r['y'],$r['m'],$r['d']) = explode("-",$d);
	list($r['h'],$r['i'],$r['s']) = explode(":",$t);
	if($aststamp){
		return mktime($r['h'],$r['i'],$r['s'],$r['m'],$r['d'],$r['y']);
	}
	return $r;
}

function elib_block($op = 'list', $delta = 0, $edit = array()) {
  if ($op == 'list') {
    return array(
      'account' => array(
        'info' => t('Login through eLib'),
        'cache' => BLOCK_NO_CACHE,
        'status' => 1,
        'region' => 'account',
      ),
    );
  }
  elseif ($op == 'view' && $delta == 'account') {
    global $user;
    $block = array();

    // If user is not logged in, display the login form.
    if (!$user->uid) {
      $block['content'] = drupal_get_form('user_login_block');
    }
    else {
      $block['content'] = 'LOGIN HERE!';   
    	
      //$block['content'] = theme('alma_user_status_block', $status);
    }

    return $block;
  }
}



/*init elib client as singleton */

function elib_client(){
	global $user;
  static $client;
  global $testuser;

  if (!isset($client)) {
    $path = drupal_get_path('module', 'elib');
    include($path . '/lib/class.eLibClient.php');
    $client = new eLibClient(variable_get('elib_language_code', ''));
    $client->base_url = variable_get('elib_base_url_wsdl', '');
  }
  return $client;
}

function elib_login_validate($form, &$form_state) {
  if (empty($form_state['values']['name']) || empty($form_state['values']['pass'])) {
    // empty user name or password makes little sense to try and validate.
    return;
  }

  // Remove everything from numbers from the “name” field to try and
  // validate it as a library/borrower card.
  $card = preg_replace('/\D+/', '', $form_state['values']['name']);

  //var_dump($card);
  //die();
  
  // Only try validation if we have 10 digits
  if (strlen($card) == 10) {
    $uid = elib_check_credentials($card, $form_state['values']['pass'],$form_state['values']['library']);

    if ($uid && $account = user_load($uid)) {
      global $user;
      $user = $account;
      user_authenticate_finalize($form_state['values']);

      // If we have Alma credentials and a user was logged in, cache the
      // credentials in our own cache bin.
      //alma_user_cache_credentials($user, $form_state['values']['name'], $form_state['values']['pass']);
    }
  }
}


function elib_displaybook(TingClientObject $object,$elib_data = false){
	
	 $image_url = ting_covers_collection_url($object, '170_x');
	
	 $out[] = '<div class="picture">' . 
      l(theme('image', $image_url, '', '', null, false), $object->url, array('html' => true)) .
    '</div>';
   if($elib_data->loanexpiredate){
   	$loanlimit = elib_str_to_time($elib_data->loanexpiredate,true);
   	$diff = $loanlimit-time();
    $days = floor($diff/86400);
    $loanperiod_class = 'long';
    if($days < 14){
    	$loanperiod_class = 'medium';
    }
    if($days < 7){
      $loanperiod_class = 'short';
    }
    $out[] = '<div class="loanperiod '.$loanperiod_class.'">'.t('Lånet udløber om <div>%days',array('%days' => format_plural($days, 'en dag', '@count dage'))).'</div></div>';
    
   }
	 $out[] = '<h3 class="title">' . 
       l($object->title, $object->url, array('attributes' => array('class' =>'title'))) . 
    '</h3>';
   $out[] = '<div class="author">' .
      t('By %creator_name%', array('%creator_name%' => $object->creators_string)) . 
    '</div>';
   $out[] = '<div class="icons">' .
      l(theme('image', 'sites/all/themes/netsound/img/listen.png', '', '', null, false), $object->url.'/stream', array('html' => true, 'attributes' => array('rel' => 'lightframe'))) .' '.
      l(theme('image', 'sites/all/themes/netsound/img/fetch.png', '', '', null, false), $object->url.'/download', array('html' => true, 'attributes' => array('rel' => 'lightframe'))) .
    '</div>';
      
  return implode($out);
    
}

function elib_displaybookNEW(TingClientObject $obj,$elib='',$displaysize=false){
	switch($displaysize){
		case 'small':
		case 'lorem':
			$image_url = ting_covers_collection_url($obj, '70_x');
			break;
		case 'medium':
			$image_url = ting_covers_collection_url($obj, '170_x');			
			break;
	}
	$part['picture'] = '<div class="picture">' . l(theme('image', $image_url, '', '', null, false), $object->url, array('html' => true)) . '</div>';
  if($elib_data->loanexpiredate){
    $loanlimit = elib_str_to_time($elib_data->loanexpiredate,true);
    $diff = $loanlimit-time();
    $days = floor($diff/86400);
    $loanperiod_class = 'long';
    if($days < 14){
      $loanperiod_class = 'medium';
    }
    if($days < 7){
      $loanperiod_class = 'short';
    }
    $part['loginexpire'] = '<div class="loanperiod '.$loanperiod_class.'">'.t('Lånet udløber om <div>%days',array('%days' => format_plural($days, 'en dag', '@count dage'))).'</div></div>';
  }
  $part['title'] = '<h3 class="title">' . l($obj->title, $obj->url, array('attributes' => array('class' =>'title'))) . '</h3>';
  $part['author'] = '<div class="author">' . t('By %creator_name%', array('%creator_name%' => $obj->creators_string)) . '</div>';
  $part['icons'] = '<div class="icons">' . l(theme('image', 'sites/all/themes/netsound/img/listen.png', '', '', null, false), $obj->url.'/stream', array('html' => true, 'attributes' => array('rel' => 'lightframe'))) .' '.l(theme('image', 'sites/all/themes/netsound/img/fetch.png', '', '', null, false), $obj->url.'/download', array('html' => true, 'attributes' => array('rel' => 'lightframe'))) .'</div>';
   
  if($displaysize == 'lorem'){
  	$words = dummy_lorem(45);
  	$part['text'] = '<div class="text" style="margin-bottom:1em;">'.$words.' <a href="#">Læs mere</a></div>';
  	$part['icons'] = '<div class="iconsnoheight">' . l(theme('image', 'sites/all/themes/netsound/img/listen.png', '', '', null, false), $obj->url.'/stream', array('html' => true, 'attributes' => array('rel' => 'lightframe'))) .' '.l(theme('image', 'sites/all/themes/netsound/img/fetch.png', '', '', null, false), $obj->url.'/download', array('html' => true, 'attributes' => array('rel' => 'lightframe'))) .'</div>';
  	$part['picture'] = '<div class="picture" style="height:170px;">' . l(theme('image', $image_url, '', '', null, false), $object->url, array('html' => true)) . '</div>';
  	$displaysize = 'small';
  }
  
  return '<div class="display-book '.$displaysize.'">'.$part['picture'].$part['loginexpire'].$part['title'].$part['author'].$part['icons'].$part['text'].'</div>';
  
}
function dummy_lorem($numberofwords=100){
	$words = explode(' ','Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam aliquet risus vitae purus rutrum tincidunt. Vivamus consectetur enim quam, ac viverra felis. Cras vitae urna id tortor suscipit rutrum quis vel metus. Nullam vulputate rhoncus diam, ultricies bibendum nulla aliquam sit amet.');
  for($i=0;$i<$numberofwords;$i++){
  	$new[] = $words[array_rand($words)];
  }
  return implode(' ',$new);
	
}

function elib_display_error($error){
	// singleton display error 
	static $isset;
	
	if(!$isset){
		drupal_set_message(t('Oops! We cound\'nt connect to the library').'<div class="spec" style="font-size:.7em">'.$error->getMessage().'</div>','error');
		$isset = true;
	}
	
}

?>