<?php

/**
 * @file
 * This module handles communikation witht the eLib web-service (now known as
 * publizon).
 *
 */

define('PLATFORM_GENERIC', 1);
define('PLATFORM_IOS', 2);

/**
 * Implements hook_menu().
 */
function elib_menu() {
  $items = array();

  $items['admin/settings/elib'] = array(
    'title' => 'eLib settings',
    'description' => t('Settings for eLib SOAP webservice'),
    'access arguments' => array('access administration pages'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ting_admin_settings_form_elib'),
    'file path' => drupal_get_path('module', 'elib') . '/includes',
    'file' => 'elib.admin.inc',
  );

  $items['admin/settings/elib/main'] = array(
    'title' => 'eLib',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function elib_theme() {
  return array(
    'page' => array(
      'template' => 'page-clean',
      'arguments' => array(
        'content' => NULL,
        'show_blocks' => TRUE,
        'show_messages' => TRUE,
      ),
    ),
  );
}

/**
 * Implement hook_form_alter().
 *
 * Adds elib user validation to the login form.
 */
function elib_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'user_login' || $form_id == 'user_login_block') {
      // Login form found, so change labels and description.
      $form['name']['#prefix'] = '<h1>' . t('Welcome to Netlydbog.dk') . '</h1><p>' . t('We noticed that you are not logged in.') . '</p><p>' . t('Please fill in your CPR number + pincode to login.') . '</p>';
      $form['name']['#title'] = t('CPR number');
      $form['pass']['#title'] = t('Pincode');
      $form['name']['#type'] = 'password';

      // Remove default descriptions.
      unset($form['name']['#description']);
      unset($form['pass']['#description']);

      // Add validation function to the front of validation form array.
      array_unshift($form['#validate'], 'elib_login_validate');
  }
}

/**
 * Login validation form that handles login into the library.
 */
function elib_login_validate($form, &$form_state) {
  // If no credentials are presented, return.
  if (empty($form_state['values']['name']) || empty($form_state['values']['pass'])) {
    return;
  }

  // The user may use both borrower card / cpr number to login, so we have to
  // remove anything thats not an number form the user name.
  $card = preg_replace('/\D+/', '', $form_state['values']['name']);

  // Try to login to the library, this will create the user if login succeed
  // and the user do not exists in Drupal.
  $account = elib_check_credentials($card, $form_state['values']['pass'], $form_state['values']['library']);
  if ($account) {
    global $user;
    $user = $account;
    user_authenticate_finalize($form_state['values']);
    drupal_goto('min_side');
  }
}

/**
 * Based on a ting_object_id this function returns the book ISBN number. It does
 * this by loading the ting object from the datawell, so this is an expensive
 * function to get the ISBN number.
 *
 * @param type $ting_object_id
 * @return type
 */
function elib_get_isbn_from_object_id($object_id){
  module_load_include('client.inc', 'ting');
  module_load_include('isbn_static_func.inc', 'elib');
  $isbn = NULL;
  try {
    $object = ting_get_object_by_id($object_id);
    foreach ($object->record['dc:identifier']['dkdcplus:ISBN'] as $isbn) {
      if (preg_match('/[^0-9]{13}/', $isbn, $matches)) {
          break;
      }
    }
  } catch (TingClientException $e) {
    // If the specified object id does not exist, an exception is throw.
  }
  return $isbn;
}

function elib_str_to_time($str, $aststamp = false){
  list($d, $t) = explode(" ", $str);
  list($r['y'], $r['m'], $r['d']) = explode("-", $d);
  list($r['h'], $r['i'], $r['s']) = explode(":", $t);
  if ($aststamp) {
    return mktime($r['h'], $r['i'], $r['s'], $r['m'], $r['d'], $r['y']);
  }
  return $r;
}

function elib_block($op = 'list', $delta = 0, $edit = array()) {
  if ($op == 'list') {
    return array(
        'account' => array(
            'info' => t('Login through eLib'),
            'cache' => BLOCK_NO_CACHE,
            'status' => 1,
            'region' => 'account',
        ),
    );
  }
  else if ($op == 'view' && $delta == 'account') {
    global $user;
    $block = array();

    // If user is not logged in, display the login form.
    if (!$user->uid) {
      $block['content'] = drupal_get_form('user_login_block');
    }
    else {
      $block['content'] = 'LOGIN HERE!';
    }

    return $block;
  }
}

/* init elib client as singleton */

function elib_client() {
  global $user;
  static $client;
  global $testuser;

  if (!isset($client)) {
    $path = drupal_get_path('module', 'elib');
    include($path . '/lib/class.eLibClient.php');

    module_load_include('isbn_static_func.inc', 'elib');

    $client = new eLibClient(variable_get('elib_language_code', ''));
    $client->base_url = variable_get('elib_base_url_wsdl', '');
  }
  return $client;
}

function elib_displaybook(TingClientObject $object,$elib_data = false){
  $image_url = elib_book_cover($object->record['dc:identifier']['dkdcplus:ISBN'], '65_x');

  $idt = explode('|', $object->record['ac:identifier'][''][0]);
  $faust = variable_get('ting_agency', '') . ':' . $idt[0];

  $out[] = '
    <div class="left">
  ';

  $out[] = '
      <div class="picture">' .
        l(theme('image', $image_url, '', '', null, false), 'ting/object/'.$faust, array('html' => true)) . '
      </div>
  ';

  $out[] = '
    </div>
  ';

  $out[] = '
    <div class="right">
  ';

  $author = (string)$elib_data->book->authors[0]->author->attributes()->name;
    $out[] = '<h3 class="title">' .
      l($elib_data->book->title, 'ting/object/'.$faust, array('attributes' => array('class' =>'title'))) .
          '</h3>';
  $out[] = '<div class="author">' .
      t('!creator_name', array('!creator_name' => l($author,'ting/search/'.$author))) .
          '</div>';
  $out[] = '<div class="rating-for-faust"><div class="'.$faust.'"></div></div>';

  if ($elib_data->loanexpiredate){
    $loanlimit = elib_str_to_time($elib_data->loanexpiredate,true);
    $diff = $loanlimit-time();
    $days = floor($diff/86400);
    $hours     = floor($diff/3600);
    $minutes   = floor($diff/60);
  }

  if ($days < 1) {
    if ($hours < 1) {
      $out[] = '<div class="loanperiod short">'.t('Loan expires in %minutes',array('%minutes' => format_plural($minutes, 'one minute.', '@count minutes.'))).'</div>';
    }
    else {
      $out[] = '<div class="loanperiod short">'.t('Loan expires in %hours',array('%hours' => format_plural($hours, 'one hour.', '@count hours.'))).'</div>';
    }
  }
  else {
    $out[] = '<div class="loanperiod short">'.t('Loan expires in %days',array('%days' => format_plural($days, 'one day.', '@count days'))).'</div>';
  }

  $out[] = _elib_action_icons('ting/object/' . $faust);
  $out[] = '</div>';

  return implode($out);

}

/**
 *
 */
function _elib_action_icons($url, $postfix = '') {
  $html = '
    <div class="icons">
      <ul>
        <li class="sample">' . l(t('Sample'), $url . $faust.'/sample', array('html' => TRUE, 'attributes' => array('action' => 'sample'))) . '</li>
        <li class="seperator"></li>
        <li class="stream">' . l(t('Stream'), $url . '/stream', array('html' => TRUE, 'attributes' => array('action' => 'stream'))) . '</li>';
        // Do not show the fetch button on mobile.
        $platform = elib_check_platform();
        if ($platform == PLATFORM_GENERIC) {
          $html .= '<li class="seperator"></li>';
          $html .= '<li class="fetch">' . l(t('Fetch'), $url . '/download', array('html' => TRUE, 'attributes' => array('action' => 'download'))) . '</li>';
        }
      $html .= ($postfix != '' ? $postfix : '') . '</ul>
    </div>';
  return $html;
}

function elib_displaybookNEW($obj, $elib = '', $displaysize = false, $block_index = 1){
  if(!is_a($obj,'TingClientObject')){
    return;
  }
  // fetch cover from elib
  $obj->url = 'ting/object/' . $obj->id;

  switch ($displaysize) {
    case 'small':
    case 'small_rm':
    case 'lorem':
    case 'review':
      $image_url = elib_book_cover($obj->record['dc:identifier']['dkdcplus:ISBN'], '65_x');
      break;
    case 'medium':
    case 'textright':
      $image_url = elib_book_cover($obj->record['dc:identifier']['dkdcplus:ISBN'], '170_x');
      break;
  }

  //dsm($obj);
	$alttext = t('@titel af @forfatter', array('@titel' => $obj->record['dc:title'][''][0], '@forfatter' => $obj->record["dc:creator"]["dkdcplus:aut"][0]));
  $part['picture'] = '<div class="picture">' . l(theme('image', $image_url, $alttext, $alttext, null, false), $obj->url, array('html' => true)) . '</div>';
  if ($elib_data->loanexpiredate) {
    $loanlimit = elib_str_to_time($elib_data->loanexpiredate, true);
    $diff = $loanlimit-time();
    $days = floor($diff / 86400);
    $loanperiod_class = 'short';
    $part['loginexpire'] = '<div class="loanperiod ' . $loanperiod_class . '">' . t('Lånet udløber om <div>%days', array('%days' => format_plural($days, 'en dag', '@count dage'))) . '</div></div>';
  }

  $part['rating'] = '<div class="rating-for-faust"><div class="'.$obj->localId.'"></div></div>';
  $part['title'] = '<h3 class="title">' . l($obj->record['dc:title'][''][0], $obj->url, array('attributes' => array('class' =>'title'))) . '</h3>';
  $part['author'] = '<div class="author">' . t('!creator_name', array('!creator_name' => l($obj->record["dc:creator"]["dkdcplus:aut"][0],'ting/search/'.$obj->record["dc:creator"]["dkdcplus:aut"][0]))) . '</div>';
  $part['icons'] = _elib_action_icons($obj->url);

  if ($displaysize == 'review') {

    $u = elib_user_get_cred($elib[1]);
    $part['text'] = '<div class="clearfix"></div><div class="text">' . truncate_utf8($elib[0], 400, true, true) . ' ' . l('LÆS MERE →', $obj->url) . '</div>';

    $part['icons'] = _elib_action_icons($obj->url);
    $part['picture'] = '<div class="picture">' . l(theme('image', $image_url, $alttext, $alttext, null, false), $obj->url, array('html' => true)) . '</div>';
    $displaysize = 'small';
  }

  if ($displaysize == 'textright') {
    $part['picture'] = '<div class="picture main size1of2">' . l(theme('image', $image_url, $alttext, $alttext, null, false), $obj->url, array('html' => true)) . '</div>';
    $part['author'] = '<div class="author">' . t('By !creator_name', array('!creator_name' => l($obj->record["dc:creator"]["dkdcplus:aut"][0],'ting/search/'.$obj->record["dc:creator"]["dkdcplus:aut"][0]))) . '</div>';

    return '
      <div class="display-book '.$displaysize.' line">'.
        $part['picture'].
        '<div class="right">'.
        $part['loginexpire'].
        $part['title'].
        $part['author'].
        $part['rating'].
        $part['icons'].
        $part['text'].
        $extras.
            '</div>
      </div>
    ';
  }


  if ($elib['popular']) {
    if (!empty($obj->record['dc:contributor'][''])) {
      foreach ($obj->record['dc:contributor'][''] as $reader) {
        $readers[] = l($reader,'ting/search/'.$reader);
      }
      $extras = theme('item_list', $readers, t('Reader'), 'span', array('class' => 'contributor'));
    }

    if (!empty($obj->record["dc:subject"]["dkdcplus:DBCF"])) {
      foreach($obj->record["dc:subject"]["dkdcplus:DBCF"] as $subject){
        $subs[] = l($subject,'ting/search/'.$subject);
      }
    }

    $part['icons'] = _elib_action_icons($obj->url);
  }

  if($displaysize == 'small_rm'){
    $displaysize = 'small';

    $part['icons'] = _elib_action_icons($obj->url, '
          <li class="seperator"></li>
       <li>' . l(t('Remove'), $obj->url.'/huskeliste/fjern', array('html' => true, 'query' => drupal_get_destination())) . '</li>'
    );
  }

  $part['icons'] = $part['icons'];
  return '<div class="display-book '.$displaysize.' line ruler-after index-' . $block_index . '">
    <div class="left">'.
    $part['picture'].
          '</div>
    <div class="right">'.
    $part['loginexpire'].
    $part['title'].
    $part['author'].
    $part['rating'].
    $part['icons'].
    $part['text'].
    '<div class="extras" style="margin-left:80px;">'.$extras.'</div>
    </div>
  </div>';
}

function dummy_lorem($numberofwords=100) {
  $words = explode(' ','Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam aliquet risus vitae purus rutrum tincidunt. Vivamus consectetur enim quam, ac viverra felis. Cras vitae urna id tortor suscipit rutrum quis vel metus. Nullam vulputate rhoncus diam, ultricies bibendum nulla aliquam sit amet.');
  for ($i=0; $i<$numberofwords; $i++){
    $new[] = $words[array_rand($words)];
  }
  return implode(' ', $new);

}

function elib_display_error($error) {
  // singleton display error
  static $isset;

  if (!$isset) {
    drupal_set_message(t('Oops! We cound\'nt connect to the library') . '<div class="spec" style="font-size:.7em">' . t($error->getMessage()) . '</div>', 'error', FALSE);
    $isset = TRUE;
  }
}

function elib_get_rating($objectid) {

  /* if node dosent exist, there is no rating, skip this function */
  if (!$n = node_load(array('title' => $objectid, 'type' => 'bookrating'))) {
    return;
  }

  $c = node_build_content($n, true);

  return $c->content['fivestar_widget']['#value'];
}

function elib_displaybook2(TingClientObject $obj, $fields, $settings = '', $displaysize = false) {
  $elib_data = $settings['elib'];
  switch ($displaysize) {
    case 'small':
    case 'lorem':
    case 'review':
      $image_url = ting_covers_collection_url($obj, '70_x');
      break;
    case 'medium':
    case 'textright':
      $image_url = ting_covers_collection_url($obj, '170_x');
      break;
  }
  $part['picture'] = '<div class="picture">' . l(theme('image', $image_url, '', '', null, false), $obj->url, array('html' => true)) . '</div>';
  if ($elib_data->loanexpiredate) {
    $loanlimit = elib_str_to_time($elib_data->loanexpiredate, true);
    $diff = $loanlimit - time();
    $days = floor($diff / 86400);
    $loanperiod_class = 'short';
    $part['loginexpire'] = '<div class="loanperiod ' . $loanperiod_class . '">' .t ('Lånet udløber om <div>%days', array('%days' => format_plural($days, 'en dag', '@count dage'))) . '</div></div>';
  }

  $part['title'] = '<h3 class="title">' . l($obj->title, $obj->url, array('attributes' => array('class' =>'title'))) . '</h3>';
  $part['author'] = '<div class="author">' . t('By !creator_name', array('!creator_name' => l($obj->creators_string,'ting/search/'.$obj->creators_string))) . '</div>';
  $part['icons'] = _elib_action_icons($obj->url);

  if ($displaysize == 'review') {

    $u = elib_user_get_cred($elib[1]);

    $part['text'] = '<div class="clearfix"></div><div class="text">'.truncate_utf8($elib[0],400,true,true).'</div>';
    $part['icons'] = _elib_action_icons($obj->url);

    $part['picture'] = '<div class="picture">' . l(theme('image', $image_url, '', '', null, false), $obj->url, array('html' => true)) . '</div>';
    $displaysize = 'small';
  }
  if($displaysize == 'textright'){
    if (!empty($obj->record['dc:contributor']['oss:dkind'])) {
     foreach($obj->record['dc:contributor']['oss:dkind'] as $reader){
        $readers[] = l($reader,'ting/search/'.$reader);
      }
      $extras = theme('item_list', $readers, t('Reader'), 'span', array('class' => 'contributor'));
    }
    if (!empty($obj->subjects)) {
      foreach($obj->subjects as $subject){
        $subs[] = l($subject,'ting/search/'.$subject);
      }
      $extras .= theme('item_list', $subs, t('Subjects'), 'span', array('class' => 'subject'));
    }
    if (!empty($obj->record['dcterms:extent'][''])) {
      $extras .= theme('item_list', $obj->record['dcterms:extent'][''], t('Extent'), 'span', array('class' => 'version'));
    }

    return '<div class="display-book '.$displaysize.' line">'.$part['picture'].$part['loginexpire'].$part['title'].$part['author'].$part['icons'].$part['text'].$extras.'</div>';
  }

  return '<div class="display-book '.$displaysize.' line ruler-after">'.$part['picture'].$part['loginexpire'].$part['title'].$part['author'].$part['icons'].$part['text'].'</div>';

}

/**
 * Getting a cover form eLib WS by ISBN
 *
 * @param array $isbns
 * @param string $presetname
 * @return string
 */
function elib_book_cover($isbns, $presetname) {
  // Look in the ISBNs to find if image have been downloaded.
  foreach ($isbns as $isbn) {
    if (preg_match('/^([0-9]{13})/', $isbn, $matches)) {
      $path = _elib_cover_cache_get($isbn);
      if ($path) {
        return imagecache_create_url($presetname, $path);
      }
    }
  }

  // No image found try elib client and featch one.
  $c = elib_client();
  $c->setLibrary(variable_get('elib_retailer_id', ''));
  // fetch book from elib by isbn
  try {
    foreach ($isbns as $isbn) {
      $book = $c->getBook($isbn);
      if (isset($book->data->coverimage)) {
        $path = elib_init_cover_path($isbn);
        $path = _elib_covers_fetch_or_redirect($path, (string) $book->data->coverimage);
        _elib_cover_cache_set($path, $isbn);
        return imagecache_create_url($presetname, $path);
      }
    }
  } catch (Exception $e) {
    // @todo: ERROR
  }

  return imagecache_create_url($presetname, _elib_covers_default_image());
}

/**
 * Help function, returns path to default image.
 */
function _elib_covers_default_image() {
  return drupal_get_path('module', 'ting_covers') . '/img/default.gif';
}

/**
 * Support method to get default cover (from ting_cover) or ask for real cover
 */
function _elib_covers_fetch_or_redirect($path, $source_url) {
  if ($source_url && filter_var($source_url, FILTER_VALIDATE_URL, FILTER_FLAG_SCHEME_REQUIRED)) {
    $path = _elib_covers_pages_fetch_image($path, $source_url);
    if ($path) {
      return $path;
    }
  }
  return _elib_covers_default_image();
}

/**
 * Help method to get cover from elib and store it locally
 */
function _elib_covers_pages_fetch_image($path, $image_url) {
  // check if the init cover is already stored localy
  $result = drupal_http_request($image_url);

  if ($result->code == 200) {
    // get the folder for the final location of this preset...
    $dir = file_directory_path() . '/' . dirname($path);
    // Build the destination folder tree if it doesn't already exists.
    if (!file_check_directory($dir, FILE_CREATE_DIRECTORY) &&
            !mkdir($dir, 0775, TRUE)) {
      return 0;
    }
    return file_save_data($result->data, $path, FILE_EXISTS_REPLACE);
  }
}

/**
 * Get a path to stored cover
 */
function elib_init_cover_path($isbn) {
  return 'elib/covers/' . md5($isbn) . '.jpg';
}

/**
 * Check for visitor platform.
 *
 * @return int
 *   1 for generic platform, 2 for ios devices.
 */
function elib_check_platform() {
  $user_agent = $_SERVER['HTTP_USER_AGENT'];

  if (preg_match('/(iPod)|(iPad)|(iPhone)/i', $user_agent)) {
    return PLATFORM_IOS;
  }
  else {
    return PLATFORM_GENERIC;
  }
}

/**
 * Fetch single ting object by isbn.
 *
 * @param String $isbn
 *   Item isbn number.
 * @param Boolean $enrich
 *   Whether to add additional info to the response.
 * @return Object
 *   Ting item object
 */
function elib_get_ting_object_by_isbn($isbn, $enrich = FALSE) {
  $request = ting_get_request_factory()->getSearchRequest();
  $request->setQuery('(dc.identifier=' . $isbn . ')');
  $request->setNumResults(1);

  $request = ting_add_agency($request);
  $request = ting_add_profile($request);

  $r = ting_execute($request);
  $object = isset($r->collections[0]->objects[0]) ? $r->collections[0]->objects[0] : FALSE;

  return $object;
}

/**
 * Implements hook_flush_caches().
 *
 * Flush local cover cache, which will be rebuild base on local file system and
 * covers fetch from the web-service.
 */
function elib_flush_caches() {
  return array('cache_elib_cover');
}

/**
 * Helper function to store rendered "remember" lists based on user ID.
 *
 * @param type $data
 * @param type $isbn
 */
function _elib_cover_cache_set($data, $isbn) {
  cache_set($isbn,  $data, 'cache_elib_cover');
}

/**
 * Helper function to retrive rendered "remember" lists based on user ID.
 *
 * @param type $isbn
 * @param type $reset
 * @return boolean
 */
function _elib_cover_cache_get($isbn, $reset = FALSE) {
  if (!$reset && ($cache = cache_get($isbn, 'cache_elib_cover')) && !empty($cache->data)) {
    return $cache->data;
  }
  return FALSE;
}