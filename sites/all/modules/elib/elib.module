<?php 

function elib_menu() {
  $path  = drupal_get_path('module', 'elib') . '/includes';
  $items = array();
  
  $items['admin/settings/elib'] = array(
    'title'            => 'eLib settings',
    'description'      => 'settings for eLib SOAP webservice',
    'access arguments' => array('access administration pages'),
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('ting_admin_settings_form_elib'),
    'file'             => 'elib.admin.inc',
    'file path'        => $path,
  //  'type'             => MENU_LOCAL_TASK,
    'weight'           => 2,
  );
  $items['admin/settings/elib/main'] = array(
    'title' => 'eLib',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  
  $items['ting/object/%/stream'] = array(
    'title' => 'stream',
    'page callback' => 'elib_get_lydbog',
    'page arguments' => array(2,3),
    'access arguments' => array('access content'),
    
  );
  $items['ting/object/%/download'] = array(
    'title' => 'wma',
    'page callback' => 'elib_get_lydbog',
    'page arguments' => array(2,3),
    'access arguments' => array('access content'),
    
  );
  return $items;
}

function elib_form_alter(&$form, $form_state, $form_id) {
  switch ($form_id) {
    case 'user_login':
    case 'user_login_block':
    	array_unshift($form['#validate'], 'elib_login_validate');
      //$form['#submit'][] = 'elib_login_submit';
    	break;
  }
}

function elib_get_isbn_from_object_id($oid){
  module_load_include('client.inc', 'ting');
  try {
    $object = ting_get_object_by_id($oid);
    $eliburl = $object->record['dc:identifier']['dcterms:URI'][0];
    $first = substr($eliburl,strpos($eliburl,'&id=')+4);
    $isbn = intval(substr($first,0,strpos($first,'&lib')));
  }
  catch (TingClientException $e) {
    // If the specified object id does not exist, an exception is throw.
  }
  return $isbn;
}


function elib_get_lydbog($tingObjectID,$format){
	
	global $user;
	$alreadyloaned = false;

	//no user logged in
	if(!$user->uid){
		header('Location: /user/login/?'.drupal_get_destination());
		exit();
	}
	
  $isbn = elib_get_isbn_from_object_id($tingObjectID);
	$userinfo = elib_user_get_cred();
	// verify user
  elib_client()->setLoaner($userinfo['cpr'],$userinfo['pin'],$userinfo['lib']);
  
  // kig om bogen allerede er lånt GetLibraryUserOrder
  
  // get all the books that are loaned!
	$loans = elib_client()->getLoans();
	
	
	if($loans){
		foreach($loans as $obj){
			if(trim($obj->book['idtype']) == 'ISBN'){
			  if(trim($obj->book['id']) == $isbn){
			  	// book is already loaned
			  	$alreadyloaned = true;
			  }	
			}
		}
	}
	if($alreadyloaned){
		// get local
	}
	else{
		$response = elib_client()->makeLoan($isbn,$format);
		if($response->status->code == 120){
		// else show cart	
		$content =  "du kan ikke låne flere bøgre, put den i kurven!";
		}
		else{
			var_dump($response);
			
			$content = '<iframe src="" style="width:600px;height:400px"></iframe>';
		}
		// call create loan
		// if loan show stream and create local
		
	}
	//krumo($response);
	
	// hvis ikke bogen er lånt, så CreateLoan og opret lokal kopi i tabel elib_loan
	
	// ellers så hent lokal URL

	
	return $content;
}



function elib_block($op = 'list', $delta = 0, $edit = array()) {
  if ($op == 'list') {
    return array(
      'account' => array(
        'info' => t('Login through eLib'),
        'cache' => BLOCK_NO_CACHE,
        'status' => 1,
        'region' => 'account',
      ),
    );
  }
  elseif ($op == 'view' && $delta == 'account') {
    global $user;
    $block = array();

    // If user is not logged in, display the login form.
    if (!$user->uid) {
      $block['content'] = drupal_get_form('user_login_block');
    }
    else {
      $block['content'] = 'LOGIN HERE!';   
    	
      //$block['content'] = theme('alma_user_status_block', $status);
    }

    return $block;
  }
}



/*init elib client as singleton */

function elib_client(){
	global $user;
  static $client;
  global $testuser;

  if (!isset($client)) {
    $path = drupal_get_path('module', 'elib');
    include($path . '/lib/class.eLibClient.php');
    $client = new eLibClient(variable_get('elib_language_code', ''));
    $client->base_url = variable_get('elib_base_url_wsdl', '');
  }
  return $client;
}

function elib_login_validate($form, &$form_state) {
  if (empty($form_state['values']['name']) || empty($form_state['values']['pass'])) {
    // empty user name or password makes little sense to try and validate.
    return;
  }

  // Remove everything from numbers from the “name” field to try and
  // validate it as a library/borrower card.
  $card = preg_replace('/\D+/', '', $form_state['values']['name']);

  //var_dump($card);
  //die();
  
  // Only try validation if we have 10 digits
  if (strlen($card) == 10) {
    $uid = elib_check_credentials($card, $form_state['values']['pass'],$form_state['values']['library']);

    if ($uid && $account = user_load($uid)) {
      global $user;
      $user = $account;
      user_authenticate_finalize($form_state['values']);

      // If we have Alma credentials and a user was logged in, cache the
      // credentials in our own cache bin.
      //alma_user_cache_credentials($user, $form_state['values']['name'], $form_state['values']['pass']);
    }
  }
}







?>