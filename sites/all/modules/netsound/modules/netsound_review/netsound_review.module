<?php

function netsound_review_get_review_by_ting_object_id($id) {
  if (!$id) {
    return false;
  }
  $res = db_query('
		SELECT *
		FROM content_type_review
		LEFT JOIN content_field_book ON content_field_book.vid = content_type_review.vid
		LEFT join content_field_review ON content_field_review.vid = content_type_review.vid
		WHERE content_field_book.field_book_ting_object_id = "%s"', array('%s' => trim($id)));

  return db_fetch_object($res);
}

function netsound_review_form_alter($form, $state, $id) {

  //dsm($form);
}

function netsound_review_userreview_form($form_state) {
  global $user;

  if (!$user->uid) {
    return;
  }

  $tingid = arg(2);
  module_load_include('client.inc', 'ting');
  $obj = ting_get_object_by_id($tingid);

  $form = array();

  $form['title']['#type'] = 'value';
  $form['title']['#value'] = $obj->title;

  $form['book']['#type'] = 'value';
  $form['book']['#value'] = $tingid;

  $form['field_review']['#type'] = 'textarea';
  $form['field_review']['#title'] = t('Review');
  $form['field_review']['#required'] = 1;
  $form['field_review']['#description'] = t('Du skal skrive minimum 140 tegn');

  $form['author']['#type'] = 'textfield';
  $form['author']['#title'] = t('Author');
  $form['author']['#required'] = 1;

  $form['button']['#type'] = 'submit';
  $form['button']['#value'] = t('send review');

  return $form;
}

function netsound_review_userreview_form_validate($form, &$form_state) {
  if (strlen($form_state['values']['field_review']) < 140) {
    form_set_error('type', t('Anmeldelsen skal være mere end 140 tegn'));
  }
}

function netsound_review_userreview_form_submit($form, &$form_state) {
  global $user;


  $fields = array('elib_username' => $form_state['values']['author'], 'uid' => $user->uid);
  drupal_write_record('elib_user', $fields, array('uid'));

  $node = new stdClass();

  $node->type = 'user_review';
  $node->created = time();
  $node->title = $form_state['values']['title'];
  $node->uid = $user->uid;

  $node->field_review = array(0 => array('value' => $form_state['values']['field_review'], 'format' => 4));
  $node->field_book = array(0 => array('ting_object_id' => $form_state['values']['book'], 'ting_ref_type' => 'object'));

  node_save($node);

  drupal_set_message(t('Your form has been saved.'));
}

function netsound_review_block($op = 'list', $delta = 0) {
  switch ($op) {
    case 'list':
      return array(
        array(
          'info' => t('BOOKDISPLAY: user reviews'),
        ),
        array(
          'info' => t('BOOKDISPLAY: editors reviews'),
        ),
        array(
          'info' => t('BOOKDISPLAY: litteratursiden.dk review'),
        ),
      );
      break;

    case 'view':
      $block = array();
      $content = '';
      $ting_id = arg(2);

      switch ($delta) {
        case 0:
          $content = '
            <div class="line clear-block rulerafter">
              <div class="unit size1of4 review-title">Skriv anmeldelse</div>
              <div class="unit lastUnit">' . $reviews . drupal_get_form('netsound_review_userreview_form') . '</div>
            </div>';

          break;

        case 1:
          $review = netsound_review_get_review_by_ting_object_id($ting_id);
          if (!$review) {
            return;
          }

          $content = '
            <div class="line clear-block rulerafter">
              <div class="unit size1of4 review-title">Vores anmeldelse</div>
              <div class="unit lastUnit">' . truncate_utf8($review->field_review_value, 500, true, true) . ' ' . l('læs hele anmeldelsen', 'node/' . $review->nid) . '</div>
            </div>';
          break;

        case 2:
          $cid = 'litteratursiden_' . $ting_id;

          // Try to look review up in the cache
          if ($review = cache_get($cid.'1')) {
            $review = $review->data;
          }
          else {
            // Get ting object.
            module_load_include('client.inc', 'ting');
            $obj = ting_get_object_by_id($ting_id);

            // Request litteratursiden about the authot and title.
            $str = 'http://www.litteratursiden.dk/service/netlydbog?author=' . urlencode(trim($obj->creators_string)) . '&title=' . urlencode(trim($obj->title));
            $request = drupal_http_request($str);
            $json = $request->data;

            // Decode result.
            if (!empty($json)) {
              $review = json_decode($json, true);
            }

            if (is_array($review)) {
              cache_set($cid, $review, 'cache', time() + (86400 * 30));
            }
          }

          // Check if there where any error.
          if ($review['error']) {
            return;
          }

          $content = '
            <div class="line clear-block rulerafter">
              <div class="unit size1of4 review-title">Anmeldelse fra litteratursiden.dk</div>
              <div class="unit lastUnit">' . netsound_review_tag_safe_truncat($review['description'], 500, true) . ' ' . l('Læs hele anmeldelsen på litteratursiden.dk', $review['link'], array('attributes' => array('target' => '_blank'))) . '</div>
            </div>';

          break;
      }

      $block['content'] = $content;
      return $block;
  }
}

/**
 * Truncate sting in a HTML tag safe way.
 *
 * Modified version from http://stackoverflow.com/questions/1193500/php-truncate-html-ignoring-tags.
 *
 * @param type $html
 * @param type $maxLength
 * @param type $utf8
 * @return string
 */
function netsound_review_tag_safe_truncat($html, $maxLength, $utf8 = true) {
  $output = '';

  $printedLength = 0;
  $position = 0;
  $tags = array();

  // For UTF-8, we need to count multibyte sequences as one character.
  $re = $utf8
      ? '{</?([a-z]+)[^>]*>|&#?[a-zA-Z0-9]+;|[\x80-\xFF][\x80-\xBF]*}'
      : '{</?([a-z]+)[^>]*>|&#?[a-zA-Z0-9]+;}';

  while ($printedLength < $maxLength && preg_match($re, $html, $match, PREG_OFFSET_CAPTURE, $position)) {
      list($tag, $tagPosition) = $match[0];

      // Print text leading up to the tag.
      $str = substr($html, $position, $tagPosition - $position);
      if ($printedLength + strlen($str) > $maxLength) {
          $output .= substr($str, 0, $maxLength - $printedLength);
          $printedLength = $maxLength;
          break;
      }

      $output .= $str;
      $printedLength += strlen($str);
      if ($printedLength >= $maxLength) {
        break;
      }

      if ($tag[0] == '&' || ord($tag) >= 0x80) {
        // Pass the entity or UTF-8 multibyte sequence through unchanged.
        $output .= $tag;
        $printedLength++;
      }
      else {
        // Handle the tag.
        $tagName = $match[1][0];
        if ($tag[1] == '/') {
          // This is a closing tag.
          $openingTag = array_pop($tags);
          assert($openingTag == $tagName); // check that tags are properly nested.

          $output .= $tag;
        }
        else if ($tag[strlen($tag) - 2] == '/') {
          // Self-closing tag.
          $output .= $tag;
        }
        else {
          // Opening tag.
          $output .= $tag;
          $tags[] = $tagName;
        }
      }

      // Continue after the tag.
      $position = $tagPosition + strlen($tag);
  }

  // Print any remaining text.
  if ($printedLength < $maxLength && $position < strlen($html)) {
    $output .= substr($html, $position, $maxLength - $printedLength);
  }

   $output .= '...';

  // Close any open tags.
  while (!empty($tags)) {
    $output .= '</' . array_pop($tags) . '>';
  }

  return $output;
}